# Comorbilidades
"hypertension" = "comorbidities___1"  ,
"dyslipidemia" = "comorbidities___2"  ,
"diabetes" = "comorbidities___3"  ,
"pad" = "comorbidities___4"  ,
"cve" = "comorbidities___5"  ,
"cvd" = "comorbidities___6"  ,
"copd" = "comorbidities___7"  ,
"kidney_disease" = "comorbidities___8"
)
# Transform into factors all the medication and comorbilidities variables before converting them into the correct names. All of them are yes,no variables.
data <- data %>%
dplyr::mutate(across(starts_with("medication"),
~ factor(.x, levels = c(0, 1), labels = c("no", "yes")))) %>%
dplyr::mutate(across(starts_with("comorbidities"),
~ factor(.x, levels = c(0, 1), labels = c("no", "yes"))))
# Rename both longitudinal and non-longitudinal data
data <- data %>%
dplyr::rename(dplyr::any_of(rename_mapping2))
# Check that the trait column is the same in both cases
factor_names <- c(tabs$traits$trait[tabs$traits$units == "factor"], updating_traits2$trait[updating_traits2$units == "factor"]) # Take into account new changes that have not been applied yet
data_traits_fct <- data_traits[data_traits$Variable...Field.Name %in% factor_names,]
yesno_name <- data_traits_fct$Variable...Field.Name[data_traits_fct$Field.Type == "yesno"]
no_yesno_name <- data_traits_fct$Variable...Field.Name[data_traits_fct$Field.Type != "yesno"]
# Convert to factor the yesno variables
data <- data %>%
dplyr::mutate(across(all_of(yesno_name),
~ factor(.x, levels = c(0, 1), labels = c("no", "yes"))))
# Transform the factors into their correct term based on the teminology in An9elproject
# Function to parse the values string into a named vector
parse_levels <- function(values_str) {
parts <- stringr::str_split(values_str, ",\\s*")[[1]]
kv <- stringr::str_split(parts, "=")
levels <- purrr::map_chr(kv, 1)
labels <- purrr::map_chr(kv, 2)
purrr::set_names(labels, levels)
}
# Convert each trait in df_trait
convert_traits <- function(df, df_trait) {
for (i in seq_len(nrow(df_trait))) {
trait_name <- df_trait$trait[i]
levels_map <- parse_levels(df_trait$values[i])
if (trait_name %in% names(df)) {
df[[trait_name]] <- factor(
df[[trait_name]],
levels = names(levels_map),
labels = levels_map
)
}
}
df
}
# Obtain the dataframe with the traits that wanted to be used to transform numerical values to factor
tabs_multifactor <- rbind(tabs$traits[tabs$traits$trait %in% no_yesno_name,],
updating_traits2[updating_traits2$trait %in% no_yesno_name,1:ncol(updating_traits2)-1]) %>%
dplyr::filter(units != "name") %>%
dplyr::filter(values != "1= male, 2= female")
# Convert the numerical values into the factors
data <- convert_traits(data, tabs_multifactor)
# Recalculate Age value
# The Age value is non-longitudinal in RedCap while is longitudinal in TABS:
# Convert id_long into date
#data_l$id_long <- as.Date(data_l$id_long)
#data_nl$date_birth <- as.Date(data_nl$date_birth)
data$id_long <- as.Date(data$id_long)
data$date_birth <- as.Date(data$date_birth)
# Calculate Age in longitudinal version
data <- data %>%
dplyr::group_by(id) %>%
dplyr::arrange(id_long) %>%
tidyr::nest() %>%
dplyr::mutate(
data = purrr::map(data, ~ .x %>%
dplyr::mutate(
age = as.numeric(id_long - date_birth[1]) / 365.25
))
) %>%
tidyr::unnest(data) %>%
dplyr::ungroup()
# Separate the longitudinal and non longitudinal values
data_nl <- data[startsWith(data$redcap_event_name, "enroll"),colnames(data) %in% colnames(tabs$data)]
# Separate the longitudinal
data_l <- data[,colnames(data) %in% colnames(tabs$longitudinal)]
# Check the length differences
length_Table = data.frame(Non_Longitudinal =  c(nrow(tabs$data), nrow(data_nl),  nrow(data_nl)-nrow(tabs$data)),
Longitudinal =  c(nrow(tabs$longitudinal), nrow(data_l), nrow(data_l)-nrow(tabs$longitudinal)),
row.names = c("An9elprojects", "RedCap", "Difference"))
knitr::kable(length_Table)
#| warning: false
#| message: false
# Convert the dates into correct format
data_nl$date_death <- as.Date(data_nl$date_death)
data_nl$ruptured <- as.Date(data_nl$ruptured)
# Convert id into factor
data_nl$id <- as.factor(data_nl$id)
data_nl[data_nl == ""] <- NA
tabs <- get_project("tabs")
# obj_out <- update_values(tabs, data_nl) # 2.0.4.1
summary(data_nl)
#| warning: false
#| message: false
# Load the data from RedCap
# Load database
data2_num <- read.csv('/home/ager/ager-bioinf02/ager/TABS/TABS2RedCap/RedCap_DataBase/2025-07-02/TABSDatabase_DATA_2025-07-02_1158.csv')
data2_lab <- read.csv('/home/ager/ager-bioinf02/ager/TABS/TABS2RedCap/RedCap_DataBase/2025-07-02/TABSDatabase_DATA_LABELS_2025-07-02_1159.csv')
# Load Dictionary
data2_traits <- read.csv('/home/ager/ager-bioinf02/ager/TABS/TABS2RedCap/RedCap_DataBase/2025-07-02/TABSDatabase_DataDictionary_2025-07-02.csv')
# Save data_previous version before any change is made
data_pre <- data
# Get the non-longitudinal data
tabs <- get_project("tabs", version = "2.0.3.2")
# Data rename medication and comorbilities column
rename_mapping2 <- c(
# id
"id" = "study_id",
# MedicaciÃ³n
"antihypertensives" = "medication___6",
"aines_aspirin" = "medication___1",
"glucocorticoids" = "medication___2",
"statins" = "medication___3",
"antidiabetics" = "medication___4",
"anticoagulants" = "medication___5",
# Comorbilidades
"hypertension" = "comorbidities___1"  ,
"dyslipidemia" = "comorbidities___2"  ,
"diabetes" = "comorbidities___3"  ,
"pad" = "comorbidities___4"  ,
"cve" = "comorbidities___5"  ,
"cvd" = "comorbidities___6"  ,
"copd" = "comorbidities___7"  ,
"kidney_disease" = "comorbidities___8",
# Other aneurysms
"thoracic_aortic_aneurysm" =  "other_aneurysms_type___1",
"iliac_aneurysm" = "other_aneurysms_type___2",
"popliteal_aneurysm" = "other_aneurysms_type___3",
"other_type_aneurysm" = "other_aneurysms_type___4"
)
# Transform into factors all the medication and comorbilidities variables before converting them into the correct names. All of them are yes,no variables.
data2_num <- data2_num %>%
dplyr::mutate(across(starts_with("medication"),
~ factor(.x, levels = c(0, 1), labels = c("no", "yes")))) %>%
dplyr::mutate(across(starts_with("comorbidities"),
~ factor(.x, levels = c(0, 1), labels = c("no", "yes")))) %>%
dplyr::mutate(across(starts_with("other_aneurysms_type"),
~ factor(.x, levels = c(0, 1), labels = c("no", "yes"))))
# Rename both longitudinal and non-longitudinal data2_num
data2_num <- data2_num %>%
dplyr::rename(dplyr::any_of(rename_mapping2))
# Check that the trait column is the same in both cases
factor_names <- c(tabs$traits$trait[tabs$traits$units == "factor"], updating_traits2$trait[updating_traits2$units == "factor"]) # Take into account new changes that have not been applied yet
data2_traits_fct <- data2_traits[data2_traits$Variable...Field.Name %in% factor_names,]
yesno_name <- data2_traits_fct$Variable...Field.Name[data2_traits_fct$Field.Type == "yesno"]
no_yesno_name <- data2_traits_fct$Variable...Field.Name[data2_traits_fct$Field.Type != "yesno"]
# Convert to factor the yesno variables
data2_num <- data2_num %>%
dplyr::mutate(across(all_of(yesno_name),
~ factor(.x, levels = c(0, 1), labels = c("no", "yes"))))
# Transform the factors into their correct term based on the teminology in An9elproject
# Function to parse the values string into a named vector
parse_levels <- function(values_str) {
parts <- stringr::str_split(values_str, ",\\s*")[[1]]
kv <- stringr::str_split(parts, "=")
levels <- purrr::map_chr(kv, 1)
labels <- purrr::map_chr(kv, 2)
purrr::set_names(labels, levels)
}
# Convert each trait in df_trait
convert_traits <- function(df, df_trait) {
for (i in seq_len(nrow(df_trait))) {
trait_name <- df_trait$trait[i]
levels_map <- parse_levels(df_trait$values[i])
if (trait_name %in% names(df)) {
df[[trait_name]] <- factor(
df[[trait_name]],
levels = names(levels_map),
labels = levels_map
)
}
}
df
}
# Obtain the data2_num frame with the traits that wanted to be used to transform numerical values to factor
tabs_multifactor <- rbind(tabs$traits[tabs$traits$trait %in% no_yesno_name,],
updating_traits2[updating_traits2$trait %in% no_yesno_name,1:ncol(updating_traits2)-1]) %>%
dplyr::filter(units != "name") %>%
dplyr::filter(values != "1= male, 2= female")
# Convert the numerical values into the factors
data2_num <- convert_traits(data2_num, tabs_multifactor)
# Recalculate Age value
# The Age value is non-longitudinal in RedCap while is longitudinal in TABS:
# Convert id_long into date
#data2_num_l$id_long <- as.Date(data2_num_l$id_long)
#data2_num_nl$date_birth <- as.Date(data2_num_nl$date_birth)
data2_num$id_long <- as.Date(data2_num$id_long)
data2_num$date_birth <- as.Date(data2_num$date_birth)
# Calculate Age in longitudinal version
data2_num <- data2_num %>%
dplyr::group_by(id) %>%
dplyr::arrange(id_long) %>%
tidyr::nest() %>%
dplyr::mutate(
data = purrr::map(data, ~ .x %>%
dplyr::mutate(
age = as.numeric(id_long - date_birth[1]) / 365.25
))
) %>%
tidyr::unnest(data) %>%
dplyr::ungroup()
#| warning: false
#| message: false
# The additional type of aneurysm traits should be added
t1 <- c("thoracic_aortic_aneurysm", "Presence of thoracic aortic aneurysm. (In the case of a YES means that the additional aneurysm is present in the patient, but in the case of the NO means that has not been detected, but is not 100% sure that the aneurysm isn't present, could be possible that the imaging was not able to visualize the area were the Aneurysm should be)", "factor",
"0=No, 1=Yes")
t2 <- c("iliac_aneurysm", "Presence of iliac aneurysm. (In the case of a YES means that the additional aneurysm is present in the patient, but in the case of the NO means that has not been detected, but is not 100% sure that the aneurysm isn't present, could be possible that the imaging was not able to visualize the area were the Aneurysm should be)", "factor",
"0=No, 1=Yes")
t3 <- c("popliteal_aneurysm", "Presence of popliteal aneurysm. (In the case of a YES means that the additional aneurysm is present in the patient, but in the case of the NO means that has not been detected, but is not 100% sure that the aneurysm isn't present, could be possible that the imaging was not able to visualize the area were the Aneurysm should be)", "factor",
"0=No, 1=Yes")
t4 <- c("other_type_aneurysm", "Presence of other type of additional aneurysm to AAA that is not a popliteal, iliac or thoracic aneurysm. (In the case of a YES means that the additional aneurysm is present in the patient, but in the case of the NO means that has not been detected, but is not 100% sure that the aneurysm isn't present, could be possible that the imaging was not able to visualize the area were the Aneurysm should be)", "factor",
"0=No, 1=Yes")
# Combine all non-longitudinal variables into a matrix
traits_lon <- rbind(t1, t2, t3, t4)
# Convert to a dataframe
df_traits_lon <- as.data.frame(traits_lon, stringsAsFactors = FALSE)
# Change the column names from the dataframe
colnames(df_traits_lon) <- c("trait", "definition", "units", "values")
# We make the subset of the data with the IDs present in the previous version of TABS
tabs <- get_project("tabs", version = "2.0.4.1")
adding_trait_lon <- data2_num[paste0(data2_num$id,data2_num$id_long) %in%
paste0(tabs$longitudinal$id,tabs$longitudinal$id_long),
colnames(data2_num) %in% c("id", "id_long",
"thoracic_aortic_aneurysm",
"iliac_aneurysm",
"popliteal_aneurysm",
"other_type_aneurysm")]
# obj_out <- addTraits(tabs, adding_trait_lon, df_traits_lon, new_version = c("2.0.5.1", "Adding other aneurysms new traits to the longitudinal data")) # 2.0.5.1
knitr::kable(df_traits_lon)%>%
kableExtra::kable_styling(font_size = 14)%>%
kableExtra::scroll_box(width = "100%", height = "360px")
#| warning: false
#| message: false
# Get the last version of TABS
tabs <- get_project("tabs", version="2.0.5.1")
# Upload an9elprojects
# obj_out <- deleteTraits(tabs, c("other_aneurysms_type", "date_surgery"), new_version = c("2.0.5.2", "Removing obsolete variables as they will have a new format"))
#| warning: false
#| message: false
# We transform longitudinal date_surgery variable from the previous version into non-longitudinal
# tabs <- get_project("tabs", version="2.0.5.1") # we dont need it because is loaded in the previuous chunk
# copy the trait info
df_traits_dat <- tabs$traits %>% dplyr::filter( trait == "date_surgery")
# Select the value of the dat for the patient that have undergone a surgery
adding_trait_dat <- tabs$longitudinal %>%
dplyr::group_by(id) %>%
tidyr::nest() %>%
dplyr::mutate(
date_surgery = purrr::map_chr(data, function(x){
if (sum(!is.na(x$date_surgery), na.rm = TRUE) > 0){
as.character(x$date_surgery[!is.na(x$date_surgery)][1])
} else if (sum(!is.na(x$date_surgery), na.rm = TRUE) > 0 &&
sum(x$surgery != "no", na.rm = TRUE) > 0) {
as.character(x$id_long[x$surgery != "no"][1])
} else{
NA
}
})
) %>%
dplyr::select(-data)%>%
dplyr::ungroup(id)
# Convert to data format
adding_trait_dat$date_surgery <- as.Date(adding_trait_dat$date_surgery)
knitr::kable(head(adding_trait_dat %>% dplyr::filter(!is.na(date_surgery))))%>%
kableExtra::kable_styling(font_size = 14)
# Upload to an9elproject
tabs <- get_project("tabs", version="2.0.5.2")
# obj_out <- addTraits(tabs, adding_trait_dat, df_traits_dat,, new_version = c("2.0.5.3", "Adding date surgery variable in non-longitudinal format"))
#| warning: false
#| message: false
# TABS 2.1.0.1 CORRECTION (not present in previously) ---------------------
# Add NA values to data2_lab
data2_lab[data2_lab == ""] <- NA
# Sort the dataframes to ensure that are comparable
data2_num <- data2_num %>%
dplyr::arrange(id, id_long)
data2_lab <- data2_lab %>%
dplyr::arrange(TABS.ID, Date_visit)
# ------------------------------------------------------------------------------
# Add technician names and convert them into factors
data2_num[,grepl("technician", colnames(data2_num), fixed=TRUE)] <-
lapply(data2_lab[,grepl("technician", colnames(data2_num), fixed=TRUE)], as.factor)
# modify smoking levels
levels(data2_num$smoking) <- levels(tabs$longitudinal$smoking)
summary(data2_num [,grepl("technician", colnames(data2_num), ignore.case = TRUE)])
#| warning: false
#| message: false
# First convert technician variables into characters in order to be able to introduce the new values. After that we can reconvert them into factors
data2_num [,grepl("technician", colnames(data2_num), ignore.case = TRUE)] <-
lapply(data2_num [,grepl("technician", colnames(data2_num), ignore.case = TRUE)], as.character)
# First we convert dates into date format
data2_num$dna_extraction_date <- as.Date(data2_num$dna_extraction_date)
# Set the technician names correctly for DNA
data2_num$technician_dna_extraction[data2_num$dna_extraction_date <= as.Date("2023-03-22")] <- "Sonia"
data2_num$technician_dna_extraction[data2_num$dna_extraction_date > as.Date("2023-03-22")] <- "Mireia"
data2_num$technician_dna_extraction[data2_num$dna_extraction_date >= as.Date("2024-07-24") &
data2_num$dna_extraction_date <= as.Date("2024-09-18")] <- "Maria"
# Set the technician names correctly for RNA
data2_num$technician_rna_extraction[data2_num$rna_mirna_extraction_date <= as.Date("2023-03-22")] <- "Sonia"
data2_num$technician_rna_extraction[data2_num$rna_mirna_extraction_date > as.Date("2023-03-22")] <- "Mireia"
data2_num$technician_rna_extraction[data2_num$rna_mirna_extraction_date >= as.Date("2024-07-24") &
data2_num$rna_mirna_extraction_date <= as.Date("2024-09-18")] <- "Maria"
# Purification of RNA
data2_num$rna_total_volume <- as.numeric(data2_num$rna_total_volume )
# Set the technician for each case
data2_num$technician_rna_purif[data2_num$rna_total_volume == 48 |
data2_num$rna_total_volume == 58] <- "Mireia"
data2_num$technician_rna_purif[data2_num$rna_total_volume == 18] <- "Sonia"
# Re-convert into factor
data2_num [,grepl("technician", colnames(data2_num), ignore.case = TRUE)] <-
lapply(data2_num [,grepl("technician", colnames(data2_num), ignore.case = TRUE)], as.factor)
# Set the date for each case
data2_num$rna_purif_date[data2_num$rna_total_volume == 48 |
data2_num$rna_total_volume == 58] <- "2023-07-27"
data2_num$rna_purif_date[data2_num$rna_total_volume == 18] <- "2024-10-18"
summary(data2_num [,grepl("technician", colnames(data2_num), ignore.case = TRUE)])
#| warning: false
#| message: false
#load TABS last version
tabs <- get_project("tabs", version="2.0.5.3")
# Creating the non-longitudinal dataframe
data2_nl <- data2_num[,colnames(data2_num) %in% c(colnames(tabs$data), "surgery", "id_long")] %>%
dplyr::group_by(id)%>%
tidyr::nest()%>%
dplyr::mutate(
date_birth = purrr::map_chr(data, function(x){as.character(x$date_birth[1])}),
sex = purrr::map_chr(data, function(x){as.character(x$sex[1])}),
date_death = purrr::map_chr(data, function(x){
# Order the date vector and choose the lower value
# (because these variables are saaved in longitudinal and there could be some
# error where they have saved more than one value)
aa <- x$date_death
aa[aa==""] <- NA
as.character(aa[order(aa)][1])
}),
date_surgery = purrr::map_chr(data, function(x){
# Order the date vector and choose the lower value
# (because these variables are saaved in longitudinal and there could be some
# error where they have saved more than one value)
aa <- x$date_surgery
aa[aa==""] <- NA
if(sum(!is.na(aa), na.rm = TRUE) > 0){
as.character(aa[order(aa)][1])
} else if(sum(!is.na(aa), na.rm = TRUE) == 0 &&
sum(x$surgery == "yes", na.rm = TRUE) > 0){
as.character(x$id_long[x$surgery == "yes"][1])
}else {NA_character_}
}),
ruptured = purrr::map_chr(data, function(x){
# Order the date vector and choose the lower value
# (because these variables are saaved in longitudinal and there could be some
# error where they have saved more than one value)
aa <- x$ruptured
aa[aa==""] <- NA
as.character(aa[order(aa)][1])
}),
withdrawal = purrr::map_chr(data, function(x){
# Withdrawal is also saved in longitudinal dataset so it need to be treated
# in a special way. We know that the clinicians could choose "NO" more than once
# and once the patient is withdrawal select another value. So in the
# non-longitudinal we will select the highe
aa <- x$withdrawal
aa[aa==""] <- NA
if(sum(!is.na(aa), na.rm = TRUE) == 0) {NA_character_}
else if (sum(aa != "No", na.rm = TRUE) > 0 &&
length(unique(aa[aa!="No"])[!is.na(unique(aa[aa!="No"]))]) ==1) {
as.character(unique(aa[aa!="No"])[!is.na(unique(aa[aa!="No"]))][1])
}else if(sum(aa != "No", na.rm = TRUE) == 0){"no"}
else{"ERROR"}
})
)%>%
dplyr::select(-data)%>%
dplyr::ungroup(id)
#Convert dates to dates
data2_nl[,colnames(data2_nl) %in% c("ruptured", "date_surgery",
"date_death", "date_birth")] <-
lapply(data2_nl[,colnames(data2_nl) %in% c("ruptured", "date_surgery",
"date_death", "date_birth")], as.Date)
# convert factors to factors
data2_nl[,colnames(data2_nl) %in% c("sex", "withdrawal")] <-
lapply(data2_nl[,colnames(data2_nl) %in% c("sex", "withdrawal")], as.factor)
summary(data2_nl)
# Ulpload it to an9elproject
# obj_out <- update_values(tabs, data2_nl,
#   new_version = c("2.0.5.4", "Updating non-lon values"))
#| warning: false
#| message: false
#load TABS last version
# tabs <- get_project("tabs", version = "2.0.5.4")
data2_l <- data2_num[, colnames(data2_num) %in% colnames(tabs$longitudinal)]
# Convert all the dates to date format
# Assuming your data frame is called `df`
data2_l[] <- lapply(names(data2_l), function(col) {
if (grepl("date", col, ignore.case = TRUE) && is.character(data2_l[[col]])) {
as.Date(data2_l[[col]])
} else {
data2_l[[col]]
}
})
# Check the column names that are in redcap but not in the longitudinal data
colnames(data2_num)[!colnames(data2_num) %in% colnames(data2_l)]
#| warning: false
#| message: false
# I will make a function that detects the first YES, and after that it creates a list with a vector for each patient that has a YES in taht values with the next values of the same variable from the next visits.
h_list <- tabs$longitudinal %>%
dplyr::select(id, id_long, diabetes)%>%
dplyr::group_by(id) %>%
tidyr::nest() %>%
dplyr::mutate(
minyes = purrr::map_dbl(data, function(x){
if (sum(x$diabetes == "yes", na.rm = TRUE) > 0){
pos <- which(x$diabetes == "yes")
min(pos)
}
else{
NA
}
}),
maxno = purrr::map_dbl(data, function(x){
if (sum(x$diabetes == "no", na.rm = TRUE) > 0){
pos <- which(x$diabetes == "no")
max(pos)
}
else{
NA
}
}),
val = purrr::map_chr(data, function(x){
toString(x$diabetes)
})
)%>%
dplyr::filter(!is.na(minyes) && !is.na(maxno))%>%
dplyr::select(-data)
knitr::kable(h_list)
#| warning: false
#| message: false
# Get the previous values to RedCap for medication and commorbidities
pre_updt <- tabs$longitudinal[, colnames(tabs$longitudinal) %in%
c("id", "id_long",
"antihypertensives","aines_aspirin", "glucocorticoids",
"statins", "antidiabetics", "anticoagulants", "hypertension",
"dyslipidemia", "diabetes", "pad", "cve", "cvd", "copd",
"kidney_disease")]
# Fill in downstream the different values of the database
pre_updt2 <- pre_updt %>%
dplyr::group_by(id) %>%
tidyr::fill(all_of(colnames(pre_updt)[3:ncol(pre_updt)]), .direction = "downup")
pre_updt2$id_long <- as.Date(as.character(pre_updt2$id_long))
# Add the modified data in the previous dataset
data3_l <- data2_l%>%
dplyr::rows_update(pre_updt2, by = c("id", "id_long"), unmatched = "ignore")
# Number of duplicated id-id_long values
sum(duplicated(paste0(data3_l$id, data3_l$id_long)))
# Check if there are NAs in id_long:
sum(is.na(data3_l$id_long))
# Remove the two NAs in id_long
data3_l <- data3_l%>%
dplyr::filter(!is.na(id_long))
# Ulpload it to an9elproject
#tabs <- get_project("tabs", version = "2.0.5.5")
#obj_out <- update_values(tabs, data3_l,
#                         new_version = c("2.0.5.6", "Updating longitudinal values"))
# load previously updated version
tabs <- get_project("tabs", version = "2.0.4.1")
# Check the length differences
length_Table = data.frame(Non_Longitudinal =  c(nrow(tabs$data), nrow(data2_nl),  nrow(data2_nl)-nrow(tabs$data)),
Longitudinal =  c(nrow(tabs$longitudinal), nrow(data3_l), nrow(data3_l)-nrow(tabs$longitudinal)),
row.names = c("An9elprojects", "RedCap", "Difference"))
knitr::kable(length_Table)
# TABS 2.1.0.1 Correction -----------------------------------------------------
corr_technician <- data3_l[,c(1, 3, which(grepl("technician", colnames(data3_l), ignore.case = TRUE)))]
# Ulpload it to an9elproject
# tabs <- get_project("tabs", version = "2.1")
# obj_out <- update_values(tabs, corr_technician,
#                          new_version = c("2.1.0.1", "Correcting technician values"))
# -----------------------------------------------------------------------------
# TABS 2.1.0.2 Correction ------------------------------------------------------
# I REALIZE THAT AINES ASPIRIN AND HYPERTENSIVE WERE WRONGLY WRITEN
tabs <- get_project("tabs", version = "2.1.0.1")
obj_out <- update_values(tabs, data3_l,
new_version = c("2.1.0.2", "Correcting hypertensives and aines_aspirin"))
library(an9elproject)
tb <- get_project("tabs")
tb <- get_project("tabs", version = "1.5")
tb <- get_project("tabs")
tb_pre <- get_project("tabs", version = "1.5")
summary(tb$longitudinal$other_aneurysms)
summary(tb_pre$longitudinal$other_aneurysm)
tb_pre <- get_project("tabs", version = "1.8")
tb_pre <- get_project("tabs", version = "1.8.0")
tb_pre <- get_project("tabs", version = "1.7")
summary(tb_pre$longitudinal$other_aneurysm)
summary(tb$longitudinal)
View(tb$longitudinal)
View(tb_pre$longitudinal)
tb$version
View(tb$version)
tb_pre <- get_project("tabs", version = "0.0.8000")
summary(tb_pre$longitudinal)
View(tb_pre)
View(tb_pre$longitudinal)
tb$functionals$import_features()
tb$functionals$import_features
View(tb$longitudinal[,c("id", "id_long", "other_aneurysms")])
View(tb_pre$longitudinal[,c("id", "id_long", "other_aneurysm")])
