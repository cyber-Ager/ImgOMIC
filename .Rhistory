grid.arrange(plate1_repeat, plate2_hole ,plate2_repeat, plate4_hole, ncol=2, nrow=2)
#| label: fig-plateBoxplot
#| fig-cap: "miRNA quantity distribution sepparated by plate."
#| warning: false
bp1 <- ggplot(df_mirna_rs2, aes(x=as.factor(Plate), y=Quantity, fill=as.factor(Plate)))+
geom_boxplot()+ggtitle("Total miRNA Quantity distribution")+labs(x = "Plate")+
theme(legend.position="none")
bp2 <- ggplot(df_mirna_rs2, aes(x=as.factor(Plate), y=Quantity, fill=miRNA))+
geom_boxplot()+ggtitle("Specific miRNA Quantity distribution")+labs(x = "Plate", fill = "miRNA")
grid.arrange(bp1, bp2, ncol=2, nrow=1)
#| label: fig-pcaPlate
#| fig-cap: "PCA of the miRNA quantity."
#| warning: false
# We select the data of interest for the PCA.
# We now that each subject has the mirnas in the same plate except the samples that are stored in the plate 6 (we discard it).
# we also discard the samples which dont have all the data available in the 4 miRNAs.
df_mirna_pca <- na.omit(df_mirna)
df_mirna_pca2 <- df_mirna_pca %>%
dplyr::filter(Plate_mir100 != 6) %>%
dplyr::filter(Plate_mir16 != 6) %>%
dplyr::filter(Plate_mir486 != 6) %>%
dplyr::filter(Plate_mir92 != 6) %>%
dplyr::select(Sample.Name, date, Plate_mir100, tidyr::starts_with("Quantity"))
# Check that the different filters have work
c(length(df_mirna_pca$Sample.Name), length(df_mirna$Sample.Name), length(df_mirna_pca2$Sample.Name))
# Correct the wrong plate information
df_mirna_pca2$Plate_mir100 <- replace(df_mirna_pca2$Plate_mir100, df_mirna_pca2$Sample.Name == "SP5005", 2)
df_mirna_pca2$Plate_mir100 <- replace(df_mirna_pca2$Plate_mir100, df_mirna_pca2$Sample.Name=="SP5006", 2)
df_mirna_pca2$Plate_mir100 <- replace(df_mirna_pca2$Plate_mir100, df_mirna_pca2$Sample.Name=="SP5030", 4)
# Perform the PCA with the numeric data from the miRNAs
pca_mirna <- stats::prcomp(df_mirna_pca2 %>% dplyr::select(tidyr::starts_with("Quantity")), scale = TRUE)
# add the PCA results to the previous dataset
df_mirna_pca2 <- cbind(df_mirna_pca2, as.data.frame(pca_mirna$x))
# Plot the PCA divided by plates
a <- ggplot(df_mirna_pca2, aes(x=PC1, y=PC2))+
geom_point(aes(colour = factor(Plate_mir100)))+
ggtitle("PCA of miRNAs separated by Plate")+
labs(color = "Plate")
# Convert the date variable in a Date type variable
df_mirna_pca2$date <- as.Date(df_mirna_pca2$date, "%d-%m-%Y")
# Plot PCA painting the date of extraction
b <- ggplot(df_mirna_pca2, aes(x=PC1, y=PC2))+
geom_point(aes(colour = date))+
scale_color_gradient(low="blue", high="red")+
ggtitle("PCA of miRNAs separated by date")
# Plot both PCA together
grid.arrange(a , b, ncol=2, nrow=1)
#| label: fig-pcaName
#| fig-cap: "PCA of the miRNA quantity separated by ID names."
#| warning: false
# We separate the sample name by groups
df_mirna_pca2 <- df_mirna_pca2 %>%
dplyr::mutate(NameNumber = substr(Sample.Name , start = nchar(Sample.Name) - 2 , stop = nchar(Sample.Name)))%>%
dplyr::mutate(NameGroup = gsub('.{3}$', '', Sample.Name))
# Reset the class of the new variables
df_mirna_pca2$NameNumber <- as.numeric(df_mirna_pca2$NameNumber)
df_mirna_pca2$NameGroup <- as.factor(df_mirna_pca2$NameGroup)
# Plot the PCA separated by Sampl.Name
ggplot(df_mirna_pca2, aes(x=PC1, y=PC2))+
geom_point(aes(colour = NameNumber , shape = NameGroup), size = 3)+
scale_color_gradient(low="blue", high="red")+
ggtitle("PCA of miRNAs separated by ID")
#| label: fig-pca3D
#| fig-cap: "PCA of the miRNA quantity separated by ID names."
#| warning: false
library(plotly)
plot_ly(x = df_mirna_pca2$PC1, y = df_mirna_pca2$PC2, z = df_mirna_pca2$PC3, type = "scatter3d", mode = "markers", color = df_mirna_pca2$Plate)%>%
layout(title="PCA separated by Plate",
scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC2'),
zaxis = list(title = 'PC3')))
#| label: tbl-mirnaOutliers
#| tbl-cap: "PCA of the miRNA quantity without outliers."
#| warning: false
# Filtering the outliers
df_mirna_pca_new <- df_mirna_pca2 %>%
dplyr::filter(PC1 > -3.75)%>%
dplyr::select(-PC1,-PC2, -PC3, -PC4)
# Containing the info of outliers
df_mirna_outliers <- df_mirna_pca2 %>%
dplyr::filter(PC1 < -3.75) %>%
dplyr::select(Sample.Name, date, Plate_mir100)
kable(df_mirna_outliers)
#| label: fig-newpcaPlate
#| fig-cap: "PCA of the miRNA quantity without outliers."
#| warning: false
# Length comparison of the dataframe with and without the outliers
c(length(df_mirna_pca2$Sample.Name), length(df_mirna_pca_new$Sample.Name))
# Perform the PCA with the numeric data from the miRNAs
pca_mirna2 <- stats::prcomp(df_mirna_pca_new %>% dplyr::select(tidyr::starts_with("Quantity")), scale = TRUE)
# add the PCA results to the previous dataset
df_mirna_pca_new <- cbind(df_mirna_pca_new, as.data.frame(pca_mirna2$x))
ggplot(df_mirna_pca_new, aes(x=PC1, y=PC2))+
geom_point(aes(colour = factor(Plate_mir100)))+
ggtitle("New PCA of miRNAs separated by Plate")+
labs(color = "Plate")
# First we extract the outliers from the reshaped table
# Create identificator of the poutliers
id_outlier <- paste0(df_mirna_outliers$Sample.Name,
df_mirna_outliers$date,
df_mirna_outliers$Plate_mir100)
# Match the date variable type between both datasets
df_mirna_rs2$date <- as.Date(df_mirna_rs2$date, "%d-%m-%Y")
# Create the unique ID to remove the outliers from the dataset
df_mirna_rs3 <- df_mirna_rs2 %>%
dplyr::mutate(id_outlier = paste0(Sample.Name, date, Plate))
# Filter out rows with IDs in outlier_ids
df_mirna_rs3 <- df_mirna_rs3[!df_mirna_rs3$id_outlier %in% id_outlier, ]
c(length(df_mirna_rs2$Sample.Name), length(df_mirna_rs3$Sample.Name))
#| label: fig-QuantDif
#| fig-cap: "Quantity difference between miRNA duplicate samples."
#| warning: false
# Create the dataframe with the neccessary names for the measure_precission function
tb_input <- data.frame(id = paste0(df_mirna_rs3$Sample.Name, df_mirna_rs3$date),
sensor = df_mirna_rs3$miRNA,
measurement = df_mirna_rs3$Quantity)
#Measure the differences
tb_diff <- ImgOMIC::measure_precision(tb_input)
#| label: fig-QuantDif
#| fig-cap: "Quantity difference between miRNA duplicate samples."
#| warning: false
# Create the dataframe with the neccessary names for the measure_precission function
tb_input <- data.frame(id = paste0(df_mirna_rs3$Sample.Name, df_mirna_rs3$date),
sensor = df_mirna_rs3$miRNA,
measurement = df_mirna_rs3$Quantity)
#Measure the differences
tb_diff <- ImgOMIC::measure_precision(tb_input)
install_github("cyber-Ager/ImgOMIC")
library(devtools)
devtools::install_github("cyber-Ager/ImgOMIC")
ImgOMIC::measure_precision
roxygen2::roxygenise()
devtools::install_github("cyber-Ager/ImgOMIC")
devtools::install_github("cyber-Ager/ImgOMIC", force = TRUE)
ImgOMIC::measure_precision
#| label: fig-QuantDif
#| fig-cap: "Quantity difference between miRNA duplicate samples."
#| warning: false
# Create the dataframe with the neccessary names for the measure_precission function
tb_input <- data.frame(id = paste0(df_mirna_rs3$Sample.Name, df_mirna_rs3$date),
sensor = df_mirna_rs3$miRNA,
measurement = df_mirna_rs3$Quantity)
#Measure the differences
tb_diff <- ImgOMIC::measure_precision(tb_input)
#| label: fig-QuantDif
#| fig-cap: "Quantity difference between miRNA duplicate samples."
#| warning: false
# Create the dataframe with the neccessary names for the measure_precission function
tb_input <- data.frame(id = paste0(df_mirna_rs3$Sample.Name, df_mirna_rs3$date),
sensor = df_mirna_rs3$miRNA,
measurement = df_mirna_rs3$Quantity)
#Measure the differences
tb_diff <- ImgOMIC::measure_precision(tb_input)
#| label: fig-QuantDif
#| fig-cap: "Quantity difference between miRNA duplicate samples."
#| warning: false
# Create the dataframe with the neccessary names for the measure_precission function
tb_input <- data.frame(id = paste0(df_mirna_rs3$Sample.Name, df_mirna_rs3$date),
sensor = df_mirna_rs3$miRNA,
measurement = df_mirna_rs3$Quantity)
#Measure the differences
tb_diff <- ImgOMIC::measure_precision(tb_input)
tb <- tb_diff
colnames(tb$data)
head(tb$data)
colnames(tb$data[[1]])
View(tb)
View(tb[[2]][[1]])
require(tibble)
list.of.packages <- c("ggplot2", "dplyr", "purrr", "tidyr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Write the equation of the normalized value that would be used to calculate
norm_mir100_eq <- expression(mir100 / ((mir16 + mir92)/2))
fun <- norm_mir100_eq
# save the variable names from the function
vars <- all.vars(fun)
missing_vars <- setdiff(vars, tb$sensor)
vars
tb$sensor
missing_vars <- setdiff(tb$sensor, vars)
#| label: fig-QuantDif
#| fig-cap: "Quantity difference between miRNA duplicate samples."
#| warning: false
# Create the dataframe with the neccessary names for the measure_precission function
tb_input <- data.frame(id = paste0(df_mirna_rs3$Sample.Name, df_mirna_rs3$date),
sensor = df_mirna_rs3$miRNA,
measurement = df_mirna_rs3$Quantity)
#| label: tbl-tabs
#| tbl-cap: "First view of TABS data table."
#| warning: false
library(an9elproject)
library(knitr)
library(gridExtra)
tb <- get_project('tabs') # data is loaded
functionals <- tb$functionals # The functions are saved
tb2 <- functionals$preprocessing_growth(tb) # growth is preprocessed
kable(head(tb2$data))
#| label: fig-corr
#| fig-cap: "Correlation plot between miRNAs"
#| warning: false
#| echo: false
library(GGally)
tb_cor <- tb2$data %>%
dplyr::select(mir100, mir16, mir486, mir92a)
ggpairs(tb_cor)
#| warning: false
# Load miRNA dataframe with plate information
df_mirna <- read.table("Datasets/miR100_miR3667_and_controls_240417.txt", header = TRUE, sep = "\t")
# Plot the first rows
head(df_mirna)
dim(df_mirna) # Dimensions of the matrix
length(unique(df_mirna$Sample.Name)) # Number of unique IDs
sum(is.na(df_mirna)) # Number of NAs in the matrix
#| label: fig-NAplot
#| fig-cap: "NA plot of the qPCR results database"
#| warning: false
library(ggplot2)
library(reshape2)
# Create a logical matrix of the NA values
na_matrix <- is.na(df_mirna)
# Convert the matrix into a long format dataframe for ggplot2
na_df <- melt(na_matrix)
# Plot using ggplot2
ggplot(na_df, aes(Var2, Var1)) +
geom_tile(aes(fill = value), color = "white") +
scale_fill_manual(values = c("TRUE" = "red", "FALSE" = "blue")) +
labs(x = "Columns", y = "Rows", fill = "NA Value") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#| warning: false
#| label: tbl-mirnafreq
#| tbl-cap: "Count of samples with the same miRNA quantification frequency."
# Made a summary table with the counts of no-NA values in the miRNA columns for each subject.
df_mirna_summary <- df_mirna %>%
dplyr::group_by(Sample.Name)%>%
dplyr::summarise(
freq_mir100 = sum(!is.na(Quantity_mir100)),
freq_mir16 = sum(!is.na(Quantity_mir16)),
freq_mir486 = sum(!is.na(Quantity_mir486)),
freq_mir92 = sum(!is.na(Quantity_mir92))
)
# Count the values with the same amount of miRNA measurements
df_mirna_freq <- df_mirna_summary %>%
dplyr::count(freq_mir100, freq_mir16, freq_mir486, freq_mir92, name = "miRNA_count")
kable(df_mirna_freq)
# First I correct the incorrect name from the dataset
df_mirna <- df_mirna %>%
dplyr::rename(Efficiency_mir100 = Efficiency_mirr100)
#| label: fig-mirnaArray
#| fig-cap: "miRNA distribution in the qPCR plates."
#| warning: false
# Reshape the df_mirna table (It works in all the tables where the first two columns are for name and table)
# If I put it as a function I can just ask for the columns where the miRNA information starts
df_mirna_rs <- df_mirna %>%
tidyr::pivot_longer(
cols = 3:length(colnames(df_mirna)),
names_to = c(".value", "miRNA"),
names_pattern = "(Well|Plate|Quantity|Efficiency)_(mir\\d+)"
)%>%
dplyr::filter(!is.na(Quantity))
# Now i convert the well location information to cartesian coordinates:
# Extract the letter and number parts
# Remove the number part and get the letter
df_mirna_rs$letters <- gsub("[0-9]", "", df_mirna_rs$Well)
# Remove the upper-case letter part and get the number
df_mirna_rs$numbers <- gsub("[A-Z]", "", df_mirna_rs$Well)
# Convert the letter part to a numeric value based on its position in the alphabet (taking into account that they can be more than one letter AB, BB...)
df_mirna_rs$Wellx <- sapply(df_mirna_rs$letters, function(x) {
sum((match(strsplit(x, "")[[1]], LETTERS)) * 26^(nchar(x):1 - 1))
})
# strsplit(x, "")[[1]] -> separates the characters and takes the first vector of the list element AB -> c(A,B) (without the [[1]] it would return a list witrh different vector, in this case we would have just one vector anyways)
# nchar(x):1 -> generates a vector from the number of characers to 1 (in case of having AB c(2,1) in case of haing GGG c(3, 2, 1))
# Convert the number part to numeric
df_mirna_rs$Welly <- as.numeric(df_mirna_rs$numbers)
ggplot(df_mirna_rs, aes(Wellx, Welly))+
geom_point(aes(colour = factor(miRNA)))+
facet_wrap(~Plate)
# Create the vector combining the plate and well infoprmation
WellPlate <- paste0(df_mirna_rs$Plate, df_mirna_rs$Well)
c (length(WellPlate),
length(unique(WellPlate))) # Compare the length of the different vectors: the initial dataset, and the vector with the unique values from the Well Plate vector. All of them must have the same value
#| warning: false
#| label: tbl-repeatedWell
#| tbl-cap: "Table with the information of the samples with the same plate positions."
df_repeats <- df_mirna_rs%>%
dplyr::mutate(PlateWell = paste0(Plate, Well))%>%
dplyr::group_by(PlateWell)%>%
dplyr::filter(dplyr::n() > 1)%>%
dplyr::ungroup()%>%
dplyr::arrange(PlateWell)
# Print table
kable((df_repeats)%>%
dplyr::select(Sample.Name, date, miRNA, Well, Plate, Quantity))
#| warning: false
#| label: fig-repeatedpos
#| fig-cap: "Plate position of the repeated samples."
ggplot(df_repeats, aes(Wellx, Welly))+
geom_point(aes(colour = factor(miRNA)))+
xlim(1, 16)+
facet_wrap(~Plate)
#| warning: false
#| label: fig-arraypos
#| fig-cap: "Sample Names distribution on the miRNA arrays."
# We separate the sample name by groups
df_mirna_rs2 <- df_mirna_rs %>%
dplyr::mutate(NameNumber = substr(Sample.Name , start = nchar(Sample.Name) - 2 , stop = nchar(Sample.Name)))%>%
dplyr::mutate(NameGroup = gsub('.{3}$', '', Sample.Name))
df_mirna_rs2$NameNumber <- as.numeric(df_mirna_rs2$NameNumber)
df_mirna_rs2$NameGroup <- as.factor(df_mirna_rs2$NameGroup)
# Plot the arrayt based on name group and name number
ggplot(df_mirna_rs2, aes(Wellx, Welly))+
geom_point(aes(colour = NameNumber, shape = NameGroup), size = 3)+
scale_color_gradient(low="blue", high="red")+
facet_wrap(~Plate)
#| warning: false
#| label: fig-arrayrows
#| fig-cap: "Sample Names distribution on the plate rows with a repetition and plates row with gaps."
plate1_repeat <- ggplot(data = df_mirna_rs2%>%dplyr::filter(Plate == 1)%>%dplyr::filter(Welly == 5),
aes(x = Wellx, y = NameNumber, group = NameGroup, colour = NameGroup))+
geom_line()+ geom_point()+ylim(c(0, 120))+ ggtitle("Plate 1 Row 5")
plate2_hole <-ggplot(data = df_mirna_rs2%>%dplyr::filter(Plate == 2)%>%dplyr::filter(Welly == 5),
aes(x = Wellx, y = NameNumber, group = NameGroup, colour = NameGroup))+
geom_line() + geom_point()+ylim(c(0, 120))+ ggtitle("Plate 2 Row 5")
plate2_repeat <- ggplot(data = df_mirna_rs2%>%dplyr::filter(Plate == 2)%>%dplyr::filter(Welly == 3),
aes(x = Wellx, y = NameNumber, group = NameGroup, colour = NameGroup))+
geom_line()+ geom_point()+ylim(c(0, 120))+ ggtitle("Plate 2 Row 3")
plate4_hole <-ggplot(data = df_mirna_rs2%>%dplyr::filter(Plate == 4)%>%dplyr::filter(Welly == 3),
aes(x = Wellx, y = NameNumber, group = NameGroup, colour = NameGroup))+
geom_line() + geom_point()+ylim(c(0, 120))+ ggtitle("Plate 4 Row 3")
grid.arrange(plate1_repeat, plate2_hole ,plate2_repeat, plate4_hole, ncol=2, nrow=2)
#| warning: false
#| label: fig-arrayrows-corrected
#| fig-cap: "Sample Names distribution on the plate rows with a repetition and plates row with gaps."
# Correct the Plate values
df_mirna_rs2$Plate <- replace(df_mirna_rs2$Plate, df_mirna_rs2$Sample.Name == "SP5005", 2)
df_mirna_rs2$Plate <- replace(df_mirna_rs2$Plate, df_mirna_rs2$Sample.Name=="SP5006", 2)
df_mirna_rs2$Plate <- replace(df_mirna_rs2$Plate, df_mirna_rs2$Sample.Name=="SP5030", 4)
# Plot the corrections
plate1_repeat <- ggplot(data = df_mirna_rs2%>%dplyr::filter(Plate == 1)%>%dplyr::filter(Welly == 5),
aes(x = Wellx, y = NameNumber, group = NameGroup, colour = NameGroup))+
geom_line()+ geom_point()+ylim(c(0, 120))+ ggtitle("Plate 1 Row 5")
plate2_hole <-ggplot(data = df_mirna_rs2%>%dplyr::filter(Plate == 2)%>%dplyr::filter(Welly == 5),
aes(x = Wellx, y = NameNumber, group = NameGroup, colour = NameGroup))+
geom_line() + geom_point()+ylim(c(0, 120))+ ggtitle("Plate 2 Row 5")
plate2_repeat <- ggplot(data = df_mirna_rs2%>%dplyr::filter(Plate == 2)%>%dplyr::filter(Welly == 3),
aes(x = Wellx, y = NameNumber, group = NameGroup, colour = NameGroup))+
geom_line()+ geom_point()+ylim(c(0, 120))+ ggtitle("Plate 2 Row 3")
plate4_hole <-ggplot(data = df_mirna_rs2%>%dplyr::filter(Plate == 4)%>%dplyr::filter(Welly == 3),
aes(x = Wellx, y = NameNumber, group = NameGroup, colour = NameGroup))+
geom_line() + geom_point()+ylim(c(0, 120))+ ggtitle("Plate 4 Row 3")
grid.arrange(plate1_repeat, plate2_hole ,plate2_repeat, plate4_hole, ncol=2, nrow=2)
#| label: fig-plateBoxplot
#| fig-cap: "miRNA quantity distribution sepparated by plate."
#| warning: false
bp1 <- ggplot(df_mirna_rs2, aes(x=as.factor(Plate), y=Quantity, fill=as.factor(Plate)))+
geom_boxplot()+ggtitle("Total miRNA Quantity distribution")+labs(x = "Plate")+
theme(legend.position="none")
bp2 <- ggplot(df_mirna_rs2, aes(x=as.factor(Plate), y=Quantity, fill=miRNA))+
geom_boxplot()+ggtitle("Specific miRNA Quantity distribution")+labs(x = "Plate", fill = "miRNA")
grid.arrange(bp1, bp2, ncol=2, nrow=1)
#| label: fig-pcaPlate
#| fig-cap: "PCA of the miRNA quantity."
#| warning: false
# We select the data of interest for the PCA.
# We now that each subject has the mirnas in the same plate except the samples that are stored in the plate 6 (we discard it).
# we also discard the samples which dont have all the data available in the 4 miRNAs.
df_mirna_pca <- na.omit(df_mirna)
df_mirna_pca2 <- df_mirna_pca %>%
dplyr::filter(Plate_mir100 != 6) %>%
dplyr::filter(Plate_mir16 != 6) %>%
dplyr::filter(Plate_mir486 != 6) %>%
dplyr::filter(Plate_mir92 != 6) %>%
dplyr::select(Sample.Name, date, Plate_mir100, tidyr::starts_with("Quantity"))
# Check that the different filters have work
c(length(df_mirna_pca$Sample.Name), length(df_mirna$Sample.Name), length(df_mirna_pca2$Sample.Name))
# Correct the wrong plate information
df_mirna_pca2$Plate_mir100 <- replace(df_mirna_pca2$Plate_mir100, df_mirna_pca2$Sample.Name == "SP5005", 2)
df_mirna_pca2$Plate_mir100 <- replace(df_mirna_pca2$Plate_mir100, df_mirna_pca2$Sample.Name=="SP5006", 2)
df_mirna_pca2$Plate_mir100 <- replace(df_mirna_pca2$Plate_mir100, df_mirna_pca2$Sample.Name=="SP5030", 4)
# Perform the PCA with the numeric data from the miRNAs
pca_mirna <- stats::prcomp(df_mirna_pca2 %>% dplyr::select(tidyr::starts_with("Quantity")), scale = TRUE)
# add the PCA results to the previous dataset
df_mirna_pca2 <- cbind(df_mirna_pca2, as.data.frame(pca_mirna$x))
# Plot the PCA divided by plates
a <- ggplot(df_mirna_pca2, aes(x=PC1, y=PC2))+
geom_point(aes(colour = factor(Plate_mir100)))+
ggtitle("PCA of miRNAs separated by Plate")+
labs(color = "Plate")
# Convert the date variable in a Date type variable
df_mirna_pca2$date <- as.Date(df_mirna_pca2$date, "%d-%m-%Y")
# Plot PCA painting the date of extraction
b <- ggplot(df_mirna_pca2, aes(x=PC1, y=PC2))+
geom_point(aes(colour = date))+
scale_color_gradient(low="blue", high="red")+
ggtitle("PCA of miRNAs separated by date")
# Plot both PCA together
grid.arrange(a , b, ncol=2, nrow=1)
#| label: fig-pcaName
#| fig-cap: "PCA of the miRNA quantity separated by ID names."
#| warning: false
# We separate the sample name by groups
df_mirna_pca2 <- df_mirna_pca2 %>%
dplyr::mutate(NameNumber = substr(Sample.Name , start = nchar(Sample.Name) - 2 , stop = nchar(Sample.Name)))%>%
dplyr::mutate(NameGroup = gsub('.{3}$', '', Sample.Name))
# Reset the class of the new variables
df_mirna_pca2$NameNumber <- as.numeric(df_mirna_pca2$NameNumber)
df_mirna_pca2$NameGroup <- as.factor(df_mirna_pca2$NameGroup)
# Plot the PCA separated by Sampl.Name
ggplot(df_mirna_pca2, aes(x=PC1, y=PC2))+
geom_point(aes(colour = NameNumber , shape = NameGroup), size = 3)+
scale_color_gradient(low="blue", high="red")+
ggtitle("PCA of miRNAs separated by ID")
#| label: fig-pca3D
#| fig-cap: "PCA of the miRNA quantity separated by ID names."
#| warning: false
library(plotly)
plot_ly(x = df_mirna_pca2$PC1, y = df_mirna_pca2$PC2, z = df_mirna_pca2$PC3, type = "scatter3d", mode = "markers", color = df_mirna_pca2$Plate)%>%
layout(title="PCA separated by Plate",
scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC2'),
zaxis = list(title = 'PC3')))
#| label: tbl-mirnaOutliers
#| tbl-cap: "PCA of the miRNA quantity without outliers."
#| warning: false
# Filtering the outliers
df_mirna_pca_new <- df_mirna_pca2 %>%
dplyr::filter(PC1 > -3.75)%>%
dplyr::select(-PC1,-PC2, -PC3, -PC4)
# Containing the info of outliers
df_mirna_outliers <- df_mirna_pca2 %>%
dplyr::filter(PC1 < -3.75) %>%
dplyr::select(Sample.Name, date, Plate_mir100)
kable(df_mirna_outliers)
#| label: fig-newpcaPlate
#| fig-cap: "PCA of the miRNA quantity without outliers."
#| warning: false
# Length comparison of the dataframe with and without the outliers
c(length(df_mirna_pca2$Sample.Name), length(df_mirna_pca_new$Sample.Name))
# Perform the PCA with the numeric data from the miRNAs
pca_mirna2 <- stats::prcomp(df_mirna_pca_new %>% dplyr::select(tidyr::starts_with("Quantity")), scale = TRUE)
# add the PCA results to the previous dataset
df_mirna_pca_new <- cbind(df_mirna_pca_new, as.data.frame(pca_mirna2$x))
ggplot(df_mirna_pca_new, aes(x=PC1, y=PC2))+
geom_point(aes(colour = factor(Plate_mir100)))+
ggtitle("New PCA of miRNAs separated by Plate")+
labs(color = "Plate")
# First we extract the outliers from the reshaped table
# Create identificator of the poutliers
id_outlier <- paste0(df_mirna_outliers$Sample.Name,
df_mirna_outliers$date,
df_mirna_outliers$Plate_mir100)
# Match the date variable type between both datasets
df_mirna_rs2$date <- as.Date(df_mirna_rs2$date, "%d-%m-%Y")
# Create the unique ID to remove the outliers from the dataset
df_mirna_rs3 <- df_mirna_rs2 %>%
dplyr::mutate(id_outlier = paste0(Sample.Name, date, Plate))
# Filter out rows with IDs in outlier_ids
df_mirna_rs3 <- df_mirna_rs3[!df_mirna_rs3$id_outlier %in% id_outlier, ]
c(length(df_mirna_rs2$Sample.Name), length(df_mirna_rs3$Sample.Name))
#| label: fig-QuantDif
#| fig-cap: "Quantity difference between miRNA duplicate samples."
#| warning: false
# Create the dataframe with the neccessary names for the measure_precission function
tb_input <- data.frame(id = paste0(df_mirna_rs3$Sample.Name, df_mirna_rs3$date),
sensor = df_mirna_rs3$miRNA,
measurement = df_mirna_rs3$Quantity)
#Measure the differences
tb_diff <- ImgOMIC::measure_precision(tb_input)
#| label: tbl-PrecNumbers
#| tbl-cap: "RMS and MAD precission values (%) separated by miRNA."
#| warning: false
# Show the table with the precision values
kable(tb_diff%>%dplyr::select(-data))
#| warning: false
#| results: 'hide'
# Create the histogram column and calculate the area to be able to plot the normal
# distribution of the precision values.
tb_diff <- tb_diff %>%
dplyr::mutate(histogram = purrr::map(data, function(x) hist(x$diff/x$mn, breaks = 15, plot = FALSE)))%>%
dplyr::mutate(hist_area = purrr::map(histogram, function(x) sum(x$counts*diff(x$breaks))))%>%
dplyr::mutate(diff_mean = purrr::map(data, function(x) mean(x$diff/x$mn)))
# Custom plotting function to suppress output
plot_precision <- function(i) {
plot(i$histogram, col = "lightblue", main = paste(as.character(i$sensor), "variation"), xlab = "Relative Error", xlim = c(-0.4, 0.4))
curve(i$hist_area * dnorm(x, mean = mean(i$data$diff / i$data$mn), sd = i$RMS / 100), col = "red", add = TRUE, lwd = 2)
curve(i$hist_area * dnorm(x, mean = mean(i$data$diff / i$data$mn), sd = i$MAD / 100), col = "green", add = TRUE, lwd = 2)
legend("topright", legend = c("RMS", "MAD"), col = c("red", "green"), lwd = 2)
}
# Apply the custom function
invisible(apply(tb_diff, 1, plot_precision))
#| label: tbl-finalMeasure
#| tbl-cap: "Final mir100 Normalized measure."
#| warning: false
# Write the equation of the normalized value that would be used to calculate
norm_mir100_eq <- expression(mir100 / ((mir16 + mir92)/2))
# Select the MAD error for the error propagation calculous
tb_diff$err <- tb_diff$MAD
# Use the error propagation formula to calculate the final measure and the error
mir100_norm <- ImgOMIC::error_propagation(tb_diff, norm_mir100_eq)
mir100_norm$id_date <- mir100_norm$id
# Separate the id and date information
mir100_norm  <- mir100_norm %>%
dplyr::mutate(
# Extract everything except the last 10 characters
ID_name = substr(ID, 1, nchar(ID) - 10),
# Extract the last 10 characters
ID_date = substr(ID, nchar(ID) - 9, nchar(ID))
)
#data.table::fwrite(mir100_norm, "Results/mir100_Noirmalized.csv")
kable(head(mir100_norm))
View(df_mirna_rs3)
