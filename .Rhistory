list.of.packages <- c("dplyr", "purrr", "tidyr", "tibble")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(dplyr)
# save the variable names from the function
vars <- all.vars(fun)
# Sort the var names ascending alphabetically
vars <- sort(vars, decreasing = FALSE)
# Check if there is some variable in the function that is not defined in the tb
missing_vars <- setdiff(vars, tb$sensor)
if (length(missing_vars) > 0) {
missing_msg <- paste("The following variables defined in the equation are not shown in the input tibble:", paste(missing_columns, collapse = ", "))
stop(missing_msg) # Stop execution with an error message
}
# Simplify the tibble to save the mn value of each sensor divided in columns and ordered in rows by ID.
df_measure <- tb %>%
dplyr::select(sensor, data)%>%
dplyr::mutate(data = purrr::map(data, ~ .x %>% dplyr::select(ID, mn))) %>%
tidyr::unnest(data) %>%
tidyr::pivot_wider(names_from = sensor, values_from = mn)%>%
dplyr::arrange(ID)
View(df_measure)
# Delete the rows where there was an NA value and inform about it
df_measure2 <- df_measure %>%
dplyr::filter(if_all(everything(), ~ !is.na(.)))
df_dif <- length(df_measure$ID) - length(df_measure2$ID)
if (df_dif > 0) {
message(df_dif, "samples have been excluded from the calulation due to missing values in sensor data.")
}
# Add the variable nsensor to later save the information of the counts used for
# the calculation of the mean value (This will be important in order to
# calculate the real variability of that measurement)
tb$nsensor <- paste0("n_", tb$sensor)
# Save the n_sensor value in the same way as the mn was saved before
df_n <- tb%>%
dplyr::select(nsensor, data)%>%
dplyr::mutate(data = purrr::map(data, ~ .x %>% dplyr::select(ID, n))) %>%
tidyr::unnest(data) %>%
tidyr::pivot_wider(names_from = nsensor, values_from = n)%>%
dplyr::arrange(ID)%>%
dplyr::filter(if_all(everything(), ~ !is.na(.)))%>%
dplyr::select(-ID)
# Merge both dataframes
df_measure <- cbind(df_measure, df_n)
# Define the partial derivative of fun respect each sensor
derivatives <- lapply(vars, function(var) D(fun, var))
View(derivatives)
# Ensure that the position of the sensors in the tibble is the same as in the "vars"
tb <- tb %>%
dplyr::arrange(sensor)
# Get the relative error values for each var
err <- as.numeric(tb$err[tb$sensor %in% vars])/(100)
# create the Expression for error propagation
error_prop <- 0
for (i in seq_along(derivatives)) {
# Create the expression part by part
term <- substitute(der^2 * (error/sqrt(n_val)*val)^2, list(der = derivatives[[i]], error = err[i], val = str2lang(vars[i]), n_val = str2lang(paste0("n_",vars[i]))))
error_prop <- substitute(a + b, list(a = error_prop, b = term))
}
error_prop <- substitute(sqrt(x), list(x = error_prop))
error_prop
apply_equation <- function(...) {
# It is neccessary to have a df with the function variable names as columns
# Capture the inputs in a list
inputs <- list(...)
# Evaluate the expression, mapping inputs to x1, x2, ...
res <- eval(fun[[1]], envir = inputs)
err <- eval(do.call(substitute, list(error_prop, inputs)))
return(c(res, err))
}
# Aplly the function in the dataframe
results <- do.call(mapply, c(FUN = apply_equation, as.list(df_measure)))
View(norm_val)
sqrt(0 + 1054.5^2 * (0.0940808456833832/sqrt(2) * 4.1)^2 + 4.1^2 * (0.183711968954071/sqrt(2) * 1054.5)^2)
View(results)
630.9963/4323.45
fun <- expression(s1/s2)
tb_input <- tb_output
tb_input$err <- tb_input$MAD
norm_val <- ImgOMIC::error_propagation(tb_input, fun)
head(norm_val)
rel_err <-norm_val$error /  norm_val$measure * 100
rel_err
rel_err <-norm_val$error /  norm_val$measure * 100
rel_err
fun <- expression(s1/s2)
required_columns <- c("sensor", "err", "data")
# Check if required columns are present in the dataframe
missing_columns <- setdiff(required_columns, colnames(tb))
# If there are missing columns, show a message
if (length(missing_columns) > 0) {
missing_msg <- paste("The following required columns are missing:", paste(missing_columns, collapse = ", "))
stop(missing_msg) # Stop execution with an error message
}
required_columns <- c("ID", "mn", "n")
# Check if required columns are present in the dataframe
missing_columns <- setdiff(required_columns, colnames(tb$data[[1]]))
# If there are missing columns in the data dataframe, show a message
if (length(missing_columns) > 0) {
missing_msg <- paste("The following required columns are missing:", paste(missing_columns, collapse = ", "))
stop(missing_msg) # Stop execution with an error message
}
# Install the required packages
list.of.packages <- c("dplyr", "purrr", "tidyr", "tibble")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(dplyr)
# save the variable names from the function
vars <- all.vars(fun)
# Sort the var names ascending alphabetically
vars <- sort(vars, decreasing = FALSE)
# Check if there is some variable in the function that is not defined in the tb
missing_vars <- setdiff(vars, tb$sensor)
if (length(missing_vars) > 0) {
missing_msg <- paste("The following variables defined in the equation are not shown in the input tibble:", paste(missing_columns, collapse = ", "))
stop(missing_msg) # Stop execution with an error message
}
# Simplify the tibble to save the mn value of each sensor divided in columns and ordered in rows by ID.
df_measure <- tb %>%
dplyr::select(sensor, data)%>%
dplyr::mutate(data = purrr::map(data, ~ .x %>% dplyr::select(ID, mn))) %>%
tidyr::unnest(data) %>%
tidyr::pivot_wider(names_from = sensor, values_from = mn)%>%
dplyr::arrange(ID)
# Delete the rows where there was an NA value and inform about it
df_measure2 <- df_measure %>%
dplyr::filter(if_all(everything(), ~ !is.na(.)))
df_dif <- length(df_measure$ID) - length(df_measure2$ID)
if (df_dif > 0) {
message(df_dif, "samples have been excluded from the calulation due to missing values in sensor data.")
df_measure <- df_measure2
}
# Add the variable nsensor to later save the information of the counts used for
# the calculation of the mean value (This will be important in order to
# calculate the real variability of that measurement)
tb$nsensor <- paste0("n_", tb$sensor)
# Save the n_sensor value in the same way as the mn was saved before
df_n <- tb%>%
dplyr::select(nsensor, data)%>%
dplyr::mutate(data = purrr::map(data, ~ .x %>% dplyr::select(ID, n))) %>%
tidyr::unnest(data) %>%
tidyr::pivot_wider(names_from = nsensor, values_from = n)%>%
dplyr::arrange(ID)%>%
dplyr::filter(if_all(everything(), ~ !is.na(.)))%>%
dplyr::select(-ID)
# Merge both dataframes
df_measure <- cbind(df_measure, df_n)
# Define the partial derivative of fun respect each sensor
derivatives <- lapply(vars, function(var) D(fun, var))
# Ensure that the position of the sensors in the tibble is the same as in the "vars"
tb <- tb %>%
dplyr::arrange(sensor)
# Get the relative error values for each var
err <- as.numeric(tb$err[tb$sensor %in% vars])/(100)
# create the Expression for error propagation
error_prop <- 0
for (i in seq_along(derivatives)) {
# Create the expression part by part
term <- substitute(der^2 * (error/sqrt(n_val)*val)^2, list(der = derivatives[[i]], error = err[i], val = str2lang(vars[i]), n_val = str2lang(paste0("n_",vars[i]))))
error_prop <- substitute(a + b, list(a = error_prop, b = term))
}
error_prop <- substitute(sqrt(x), list(x = error_prop))
error_prop
View(tb_input)
devtools::uses_testthat()
setwd("~/Tesis_AAA_Ager/AAA-Thesis-Packages/ImgOMIC")
devtools::uses_testthat()
use_testthat
library(devtools)
use_testthat()
use_test()
tb <- data.frame(
ID = c("id1", "id1", "id1", "id1", "id2", "id2", "id2", "id2"),
sensor = c("s1", "s2", "s1", "s2", "s1", "s2", "s1", "s2"),
measurement = c(5, 6, 25, 30, 9, 8, 89, 86))
devtools::load_all(".")
aa <- c("id", "sensor")
paste("The following required columns are missing:", paste(aa, collapse = ", "))
tb1 <- rbind(tb, c(NA, "s1", 8))
View(tb1)
tb1 <- tb
tb1$sensor <- c("s1", "s1", "s1", "s1", "s1", "s1" ,"s1", "s1")
View(tb1)
ImgOMIC::measure_precision(tb1)
aaa <- ImgOMIC::measure_precision(tb1)
View(aaa[[2]][[1]])
tb1$sensor <- c("s1", "s2", "s3", "s4", "s5", "s6" ,"s7", "s8")
aaa <- ImgOMIC::measure_precision(tb1)
View(aaa)
View(aaa[[2]][[1]])
tb_diff <- tb1 %>%
dplyr::group_by(ID, sensor) %>%
dplyr::summarise(
diff = mean_pairwise_diff(measurement)[1],
mn = mean(measurement),
n = mean_pairwise_diff(measurement)[2],
)
View(tb_diff)
sum(tb_diff$diff)
sum(as.nummeric(tb_diff$diff))
sum(as.numeric(tb_diff$diff))
sum(c(tb_diff$diff, 0))
sum(c(tb_diff$diff, 1))
max(tb_diff$diff)
max(c(tb_diff$diff, 1)
)
tb1 <- rbind(tb, c("id3", "NA", 8))
tb1 <- rbind(tb1, c("id3", "NA", 8))
View(tb1)
aaa <- ImgOMIC::measure_precision(tb1)
View(tb1)
aaa <- ImgOMIC::measure_precision(tb)
View(aaa)
View(aaa[[2]][[1]])
aaa <- ImgOMIC::measure_precision(tb1)
View(tb)
class(tb1$measurement)
class(tb$measurement)
devtools::load_all(".")
aaa <- ImgOMIC::measure_precision(tb1)
View(tb1)
View(tb1)
tb1 <- rbind(tb, c("id3", NA, 8))
tb1 <- rbind(tb1, c("id3", NA, 8))
# Ensure that the column measurement is numeric
tb$measurement <- as.numeric(tb$measurement)
aaa <- ImgOMIC::measure_precision(tb1)
tb1 <- tb
tb1$sensor <- c(NA, NA, NA, NA, NA, NA, NA, NA)
aaa <- ImgOMIC::measure_precision(tb1)
tb1 <- tb1 %>%
dplyr::filter(!is.na(sensor))%>%
dplyr::filter(!is.na(measurement))
tb1
length(tb1$ID)
non_duplicates <- sum(tb_diff$n == 1)
non_duplicates
devtools::load_all(".")
View(tb)
tb1 <- tb
tb1$sensor <- c("s1", "s2", "s3", "s4", "s1", "s2" ,"s3", "s4")
View(tb1)
tb1 <- rbind(tb1, c("id2", "s4", 90))
aaa <- ImgOMIC::measure_precision(tb1)
tb1 <- data.frame(
ID = c("id1", "id1", "id1", "id1", "id2", "id2", "id2", "id2"),
sensor = c("s1", "s2", "s1", NA, "s1", "s2", "s1", "s2"),
measurement = c(5, 6, 25, 30, 9, 8, 89, NA))
aaa <- ImgOMIC::measure_precision(tb1)
devtools::load_all(".")
tb1 <- data.frame(
ID = c("id1", "id1", "id1", "id1", "id2", "id2", "id2", "id2"),
sensor = c("s1", "s2", "s1", NA, "s1", "s2", "s1", "s2"),
measurement = as.character(c(5, 6, 25, 30, 9, 8, 89, NA)))
aaa <- ImgOMIC::measure_precision(tb1)
tb1 <- data.frame(
ID = c("id1", "id1", "id1", "id1", "id2", "id2", "id2", "id2"),
sensor = c("s1", "s2", "s1", NA, "s1", "s2", "s1", "s2"),
measurement = as.character(c(5, 6, 25, 30, 9, 8, 89, kkk)))
tb1 <- data.frame(
ID = c("id1", "id1", "id1", "id1", "id2", "id2", "id2", "id2"),
sensor = c("s1", "s2", "s1", NA, "s1", "s2", "s1", "s2"),
measurement = as.character(c(5, 6, 25, 30, 9, 8, 89, "kk")))
aaa <- ImgOMIC::measure_precision(tb1)
as.nummeric(c(5,6,5,7,"r"))
as.numeric(c(5,6,5,7,"r"))
devtools::load_all(".")
tb1 <- data.frame(
ID = c("id1", "id1", "id1", "id1", "id2", "id2", "id2", "id2"),
sensor = c("s1", "s2", "s1", NA, "s1", "s2", "s1", "s2"),
measurement = c(5, 6, 25, 30, 9, 8, 89, "kkk"))
aaa <- ImgOMIC::measure_precision(tb1)
View(aaa)
res <- measure_precision(tb, img = FALSE)
View(res)
res$RMS[1]
res$RMS[res$sensor == "s1"]
sqrt(1/2*((5-25)/sqrt(2))^2+((9-89)/sqrt(2))^2)*100
mean(c(5, 25)
)
val2 <- sqrt(1/2*((5-25)/sqrt(2)/mean(c(5, 25)))^2+((9-89)/sqrt(2)/mean(c(9, 89)))^2)*100
tb <- data.frame(
ID = c("id1", "id1", "id1", "id1", "id2", "id2", "id2", "id2"),
sensor = c("s1", "s2", "s1", "s2", "s1", "s2", "s1", "s2"),
measurement = c(5, 6, 25, 30, 9, 8, 89, 86))
res <- measure_precision(tb, img = FALSE)
val1 <- res$RMS[res$sensor == "s1"]
val2 <- sqrt(1/2*((5-25)/sqrt(2)/mean(c(5, 25)))^2+((9-89)/sqrt(2)/mean(c(9, 89)))^2)*100
c(val1, val2)
mean(9,89)
avg(9,89)
mean(c(9,89))
9+89
98/2
val2 <- sqrt(1/2*(((5-25)/sqrt(2)/mean(c(5, 25)))^2+((9-89)/sqrt(2)/mean(c(9, 89)))^2))*100
tb <- data.frame(
ID = c("id1", "id1", "id1", "id1", "id2", "id2", "id2", "id2"),
sensor = c("s1", "s2", "s1", "s2", "s1", "s2", "s1", "s2"),
measurement = c(5, 6, 25, 30, 9, 8, 89, 86))
res <- measure_precision(tb, img = FALSE)
val1 <- res$RMS[res$sensor == "s1"]
val2 <- sqrt(1/2*(((5-25)/sqrt(2)/mean(c(5, 25)))^2+((9-89)/sqrt(2)/mean(c(9, 89)))^2))*100
c(val1, val2)
as.numeric(val1)
as.double(val1)
val2
pi
tb <- data.frame(
ID = c("id1", "id1", "id1", "id1", "id2", "id2", "id2", "id2"),
sensor = c("s1", "s2", "s1", "s2", "s1", "s2", "s1", "s2"),
measurement = c(5, 6, 25, 30, 9, 8, 89, 86))
res <- measure_precision(tb, img = FALSE)
val1 <- as.double(res$MAD[res$sensor == "s1"])
val2 <- sqrt(pi/2)*1/2*(abs((5-25)/sqrt(2)/mean(c(5, 25))) + abs((9-89)/sqrt(2)/mean(c(9, 89))))*100
expect_equal(val1, val2)
# Load the libraries
library(dplyr)
library(an9elproject)
library(parallel)
# First I define the dummy dataset
tb <- data.frame(
ID = as.factor(c("1", "1", "1", "1", "1", "1", "1", "1", "1", "2", "2", "2", "2")),
Date = c(2015, 2016, 2017, 2020, 2021, 2024, 2025, 2026, 2027, 2013, 2016, 2018, 2019),
Diam = c(30, 35, 34, 53, 50, 52, 55, 55, 57, 38, 42, 50, 53),
CT = as.factor(c(1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1))
)
# Filter patients
df_patient <- tb %>%
filter(ID == 1)
# 1. Setup (unchanged)
sp <- 4  # Number of points in the normal distr.
sdUS <- 2 # Standard deviation of the measure (US)
sdCT <- 1 # Standard deviation of the measure (CT)
dlim_sup <- 1000
dlim_inf <- 0
# Get the corrected max curve
corrected_curves <- function(df_patient,sdUS,sdCT,
dlim_sup = 1000, dlim_inf = 0) {
limUS <- 3 * sdUS # Limits of the normal distribution in US (3xSD)
limCT <- 3 * sdCT # Limits of the normal distribution in CT (3xSD)
# x points of the normal distribution in US
pUSx <- seq(-limUS, limUS, length.out = sp + 1)
# x points of the normal distribution in CT
pCTx <- seq(-limCT, limCT, length.out = sp + 1)
# y points of the normal distribution in US ;  Ensure the sum is 1
pUSy <- dnorm(pUSx, 0, sdUS); pUSy <- pUSy / sum(pUSy)
# x points of the normal distribution in CT ;  Ensure the sum is 1
pCTy <- dnorm(pCTx, 0, sdCT); pCTy <- pCTy / sum(pCTy)
# Derivative limits to consider a curve real or not
# Construcción de distribuciones borrosas
dist_list <- purrr::map2(df_patient$Diam, df_patient$CT, function(diam, ct) {
if (ct == 1) list(values = diam + pCTx, probs = pCTy)
else         list(values = diam + pUSx, probs = pUSy)
})
diam_distr <- purrr::map(dist_list, "values")
diam_prob  <- purrr::map(dist_list, "probs")
n <- length(diam_distr)
# paths: lista con data.frames para cada tiempo
paths <- list()
# Paso 1: inicialización
paths[[1]] <- data.frame(
value = diam_distr[[1]],
prob = diam_prob[[1]],
prev_idx = I(rep(list(NA), length(diam_distr[[1]])))  # lista de previos (en t = 1 → NA)
)
# Paso 2: recorrer el resto del tiempo
for (t in 2:n) {
prev_states <- paths[[t - 1]]
curr_vals   <- diam_distr[[t]]
curr_probs  <- diam_prob[[t]]
# Preparar lista para el paso t
value_list <- c()
prob_list <- c()
prev_list <- list()
# Calculate time difference
dt <- df_patient$Date[t] - df_patient$Date[t-1]
for (j in seq_along(curr_vals)) {
val_j <- curr_vals[j]
prob_j <- curr_probs[j]
# Compute rate of change (mm per year, for example)
growth_rate <- (val_j - prev_states$value) / dt
# Filter valid growth rates
valid_prev <- which(growth_rate >= dlim_inf & growth_rate <= dlim_sup)
if (length(valid_prev) == 0) next
acc_probs <- prev_states$prob[valid_prev] * prob_j
max_prob <- max(acc_probs)
best_prev <- valid_prev[which(acc_probs == max_prob)]
# Guardar estado actual
value_list <- c(value_list, val_j)
prob_list  <- c(prob_list, max_prob)
prev_list  <- c(prev_list, list(best_prev))
}
if (length(value_list) == 0) {
warning("No valid transitions at t = ", t)
return(NULL)
}
paths[[t]] <- data.frame(
value = value_list,
prob = prob_list,
prev_idx = I(prev_list)  # almacenar lista de índices anteriores válidos
)
}
# Paso 3: reconstruir TODAS las curvas más probables
last_probs <- paths[[n]]$prob
max_prob <- max(last_probs)
final_idxs <- which(last_probs == max_prob)
# Backtracking recursivo
build_paths <- function(t, idx) {
if (t == 1) {
return(list(paths[[1]]$value[idx]))
}
prev_idxs <- paths[[t]]$prev_idx[[idx]]
sub_paths <- unlist(lapply(prev_idxs, function(pidx) {
lapply(build_paths(t - 1, pidx), function(p) c(p, paths[[t]]$value[idx]))
}), recursive = FALSE)
return(sub_paths)
}
all_best_paths <- unlist(lapply(final_idxs, function(idx) {
build_paths(n, idx)
}), recursive = FALSE)
return(list(
curves = all_best_paths,
max_prob = max_prob,
num_curves = length(all_best_paths)
))
}
res <- corrected_curves(df_patient,sdUS,sdCT)
wd
setwd("~/ImgOMIC")
devtools::document()
devtools::install()
devtools::document()
devtools::install()
?ImgOMIC::correct_diameter_single()
devtools::document()
devtools::install()
?ImgOMIC::correct_diameter_single()
library(ImgOMIC)
?correct_diameters_all
?correct_diameter_single
correct_diameter_single(1)
data_multi <- data.frame(
ID = as.factor(c("1", "1", "1", "1", "1", "1", "2", "2", "2")),
Date = c(2015, 2016, 2017, 2020, 2021, 2024, 2013, 2016, 2018, 2019),
Diam = c(30, 35, 34, 53, 50, 52, 38, 42, 50, 53),
CT = as.factor(c(1, 0, 0, 1, 0, 0, 0, 0, 0, 1))
)
# Sample data for single patient ----------------------------------------------
data_multi <- data.frame(
ID = as.factor(c("1", "1", "1", "1", "1", "1", "2", "2", "2")),
Date = c(2015, 2016, 2017, 2020, 2021, 2024, 2013, 2016, 2018, 2019),
Diam = c(30, 35, 34, 53, 50, 52, 38, 42, 50, 53),
CT = as.factor(c(1, 0, 0, 1, 0, 0, 0, 0, 1))
)
# Sample data for single patient ----------------------------------------------
data_multi <- data.frame(
ID = as.factor(c("1", "1", "1", "1", "1", "1",  "2", "2", "2", "2")),
Date = c(2015, 2016, 2017, 2020, 2021, 2024, 2013, 2016, 2018, 2019),
Diam = c(30, 35, 34, 53, 50, 52, 38, 42, 50, 53),
CT = as.factor(c(1, 0, 0, 1, 0, 0, 0, 0, 0, 1))
)
df_patient <- subset(data_multi, ID == "1")
res <- correct_diameter_single(df_patient, sdUS = 1, sdCT = 1, sp = 2,
dlim_inf = 0, dlim_sup = 100)
correct_diameter_single(Date = c(2020, 2021), Diam = c(30, 32))
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
res
res <- correct_diameter_single(df_patient, sdUS = 2, sdCT = 1, sp = 2,
dlim_inf = 0, dlim_sup = 100)
res <- correct_diameter_single(df_patient, sdUS = 1, sdCT = 1, sp = 2,
dlim_inf = 0, dlim_sup = 100)
res$max_prob
devtools::test()
devtools::test()
data_multi <- data.frame(
ID = as.factor(c("1", "1", "1", "1", "1", "1",  "2", "2", "2", "2")),
Date = c(2015, 2016, 2017, 2020, 2021, 2024, 2013, 2016, 2018, 2019),
Diam = c(30, 35, 34, 53, 50, 52, 38, 42, 50, 53),
CT = as.factor(c(1, 0, 0, 1, 0, 0, 0, 0, 0, 1))
)
df_patient <- subset(data_multi, ID == "1")
res <- correct_diameter_single(df_patient, sdUS = 1, sdCT = 1, sp = 2,
dlim_inf = 0, dlim_sup = 100)
res$max_prob
devtools::test()
devtools::test()
data_multi <- data.frame(
ID = as.factor(c("1", "1", "1", "1", "1", "1", "2", "2", "2", "2")),
Date = c(2015, 2016, 2017, 2020, 2021, 2024, 2013, 2016, 2018, 2019),
Diam = c(30, 35, 34, 53, 50, 52, 38, 42, 50, 53),
CT = as.factor(c(1, 0, 0, 1, 0, 0, 0, 0, 0, 1))
)
df_patient <- subset(data_multi, ID == "1")
res_single <- correct_diameter_single(
df_patient,
sdUS = 1, sdCT = 1, sp = 2,
dlim_inf = 0, dlim_sup = 100
)
expected_avg <- colMeans(do.call(rbind, res_single$curves))
res_all <- correct_diameters_all(
df_patient,
sdUS = 1, sdCT = 1, sp = 2,
dlim_inf = 0, dlim_sup = 100
)
devtools::document()
devtools::test()
devtools::document()
