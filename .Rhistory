# Remove the upper-case letter part and get the number
df_mirna_rs$numbers <- gsub("[A-Z]", "", df_mirna_rs$Well)
# Convert the letter part to a numeric value based on its position in the alphabet (taking into account that they can be more than one letter AB, BB...)
df_mirna_rs$Wellx <- sapply(df_mirna_rs$letters, function(x) {
sum((match(strsplit(x, "")[[1]], LETTERS)) * 26^(nchar(x):1 - 1))
})
# strsplit(x, "")[[1]] -> separates the characters and takes the first vector of the list element AB -> c(A,B) (without the [[1]] it would return a list witrh different vector, in this case we would have just one vector anyways)
# nchar(x):1 -> generates a vector from the number of characers to 1 (in case of having AB c(2,1) in case of haing GGG c(3, 2, 1))
# Convert the number part to numeric
df_mirna_rs$Welly <- as.numeric(df_mirna_rs$numbers)
ggplot(df_mirna_rs, aes(Wellx, Welly))+
geom_point(aes(colour = factor(miRNA)))+
facet_wrap(~Plate)
# Create the vector combining the plate and well infoprmation
WellPlate <- paste0(df_mirna_rs$Plate, df_mirna_rs$Well)
c (length(WellPlate),
length(unique(WellPlate))) # Compare the length of the different vectors: the initial dataset, and the vector with the unique values from the Well Plate vector. All of them must have the same value
#| warning: false
#| label: tbl-repeatedWell
#| tbl-cap: "Table with the information of the samples with the same plate positions."
df_repeats <- df_mirna_rs%>%
dplyr::mutate(PlateWell = paste0(Plate, Well))%>%
dplyr::group_by(PlateWell)%>%
dplyr::filter(dplyr::n() > 1)%>%
dplyr::ungroup()%>%
dplyr::arrange(PlateWell)
# Print table
kable((df_repeats)%>%
dplyr::select(Sample.Name, date, miRNA, Well, Plate, Quantity))
#| warning: false
#| label: fig-repeatedpos
#| fig-cap: "Plate position of the repeated samples."
ggplot(df_repeats, aes(Wellx, Welly))+
geom_point(aes(colour = factor(miRNA)))+
xlim(1, 16)+
facet_wrap(~Plate)
#| warning: false
#| label: fig-arraypos
#| fig-cap: "Sample Names distribution on the miRNA arrays."
# We separate the sample name by groups
df_mirna_rs2 <- df_mirna_rs %>%
dplyr::mutate(NameNumber = substr(Sample.Name , start = nchar(Sample.Name) - 2 , stop = nchar(Sample.Name)))%>%
dplyr::mutate(NameGroup = gsub('.{3}$', '', Sample.Name))
df_mirna_rs2$NameNumber <- as.numeric(df_mirna_rs2$NameNumber)
df_mirna_rs2$NameGroup <- as.factor(df_mirna_rs2$NameGroup)
# Plot the arrayt based on name group and name number
ggplot(df_mirna_rs2, aes(Wellx, Welly))+
geom_point(aes(colour = NameNumber, shape = NameGroup), size = 3)+
scale_color_gradient(low="blue", high="red")+
facet_wrap(~Plate)
#| warning: false
#| label: fig-arrayrows
#| fig-cap: "Sample Names distribution on the plate rows with a repetition and plates row with gaps."
plate1_repeat <- ggplot(data = df_mirna_rs2%>%dplyr::filter(Plate == 1)%>%dplyr::filter(Welly == 5),
aes(x = Wellx, y = NameNumber, group = NameGroup, colour = NameGroup))+
geom_line()+ geom_point()+ylim(c(0, 120))+ ggtitle("Plate 1 Row 5")
plate2_hole <-ggplot(data = df_mirna_rs2%>%dplyr::filter(Plate == 2)%>%dplyr::filter(Welly == 5),
aes(x = Wellx, y = NameNumber, group = NameGroup, colour = NameGroup))+
geom_line() + geom_point()+ylim(c(0, 120))+ ggtitle("Plate 2 Row 5")
plate2_repeat <- ggplot(data = df_mirna_rs2%>%dplyr::filter(Plate == 2)%>%dplyr::filter(Welly == 3),
aes(x = Wellx, y = NameNumber, group = NameGroup, colour = NameGroup))+
geom_line()+ geom_point()+ylim(c(0, 120))+ ggtitle("Plate 2 Row 3")
plate4_hole <-ggplot(data = df_mirna_rs2%>%dplyr::filter(Plate == 4)%>%dplyr::filter(Welly == 3),
aes(x = Wellx, y = NameNumber, group = NameGroup, colour = NameGroup))+
geom_line() + geom_point()+ylim(c(0, 120))+ ggtitle("Plate 4 Row 3")
grid.arrange(plate1_repeat, plate2_hole ,plate2_repeat, plate4_hole, ncol=2, nrow=2)
#| warning: false
#| label: fig-arrayrows-corrected
#| fig-cap: "Sample Names distribution on the plate rows with a repetition and plates row with gaps."
# Correct the Plate values
df_mirna_rs2$Plate <- replace(df_mirna_rs2$Plate, df_mirna_rs2$Sample.Name == "SP5005", 2)
df_mirna_rs2$Plate <- replace(df_mirna_rs2$Plate, df_mirna_rs2$Sample.Name=="SP5006", 2)
df_mirna_rs2$Plate <- replace(df_mirna_rs2$Plate, df_mirna_rs2$Sample.Name=="SP5030", 4)
# Plot the corrections
plate1_repeat <- ggplot(data = df_mirna_rs2%>%dplyr::filter(Plate == 1)%>%dplyr::filter(Welly == 5),
aes(x = Wellx, y = NameNumber, group = NameGroup, colour = NameGroup))+
geom_line()+ geom_point()+ylim(c(0, 120))+ ggtitle("Plate 1 Row 5")
plate2_hole <-ggplot(data = df_mirna_rs2%>%dplyr::filter(Plate == 2)%>%dplyr::filter(Welly == 5),
aes(x = Wellx, y = NameNumber, group = NameGroup, colour = NameGroup))+
geom_line() + geom_point()+ylim(c(0, 120))+ ggtitle("Plate 2 Row 5")
plate2_repeat <- ggplot(data = df_mirna_rs2%>%dplyr::filter(Plate == 2)%>%dplyr::filter(Welly == 3),
aes(x = Wellx, y = NameNumber, group = NameGroup, colour = NameGroup))+
geom_line()+ geom_point()+ylim(c(0, 120))+ ggtitle("Plate 2 Row 3")
plate4_hole <-ggplot(data = df_mirna_rs2%>%dplyr::filter(Plate == 4)%>%dplyr::filter(Welly == 3),
aes(x = Wellx, y = NameNumber, group = NameGroup, colour = NameGroup))+
geom_line() + geom_point()+ylim(c(0, 120))+ ggtitle("Plate 4 Row 3")
grid.arrange(plate1_repeat, plate2_hole ,plate2_repeat, plate4_hole, ncol=2, nrow=2)
#| label: fig-plateBoxplot
#| fig-cap: "miRNA quantity distribution sepparated by plate."
#| warning: false
bp1 <- ggplot(df_mirna_rs2, aes(x=as.factor(Plate), y=Quantity, fill=as.factor(Plate)))+
geom_boxplot()+ggtitle("Total miRNA Quantity distribution")+labs(x = "Plate")+
theme(legend.position="none")
bp2 <- ggplot(df_mirna_rs2, aes(x=as.factor(Plate), y=Quantity, fill=miRNA))+
geom_boxplot()+ggtitle("Specific miRNA Quantity distribution")+labs(x = "Plate", fill = "miRNA")
grid.arrange(bp1, bp2, ncol=2, nrow=1)
#| label: fig-pcaPlate
#| fig-cap: "PCA of the miRNA quantity."
#| warning: false
# We select the data of interest for the PCA.
# We now that each subject has the mirnas in the same plate except the samples that are stored in the plate 6 (we discard it).
# we also discard the samples which dont have all the data available in the 4 miRNAs.
df_mirna_pca <- na.omit(df_mirna)
df_mirna_pca2 <- df_mirna_pca %>%
dplyr::filter(Plate_mir100 != 6) %>%
dplyr::filter(Plate_mir16 != 6) %>%
dplyr::filter(Plate_mir486 != 6) %>%
dplyr::filter(Plate_mir92 != 6) %>%
dplyr::select(Sample.Name, date, Plate_mir100, tidyr::starts_with("Quantity"))
# Check that the different filters have work
c(length(df_mirna_pca$Sample.Name), length(df_mirna$Sample.Name), length(df_mirna_pca2$Sample.Name))
# Correct the wrong plate information
df_mirna_pca2$Plate_mir100 <- replace(df_mirna_pca2$Plate_mir100, df_mirna_pca2$Sample.Name == "SP5005", 2)
df_mirna_pca2$Plate_mir100 <- replace(df_mirna_pca2$Plate_mir100, df_mirna_pca2$Sample.Name=="SP5006", 2)
df_mirna_pca2$Plate_mir100 <- replace(df_mirna_pca2$Plate_mir100, df_mirna_pca2$Sample.Name=="SP5030", 4)
# Perform the PCA with the numeric data from the miRNAs
pca_mirna <- stats::prcomp(df_mirna_pca2 %>% dplyr::select(tidyr::starts_with("Quantity")), scale = TRUE)
# add the PCA results to the previous dataset
df_mirna_pca2 <- cbind(df_mirna_pca2, as.data.frame(pca_mirna$x))
# Plot the PCA divided by plates
a <- ggplot(df_mirna_pca2, aes(x=PC1, y=PC2))+
geom_point(aes(colour = factor(Plate_mir100)))+
ggtitle("PCA of miRNAs separated by Plate")+
labs(color = "Plate")
# Convert the date variable in a Date type variable
df_mirna_pca2$date <- as.Date(df_mirna_pca2$date, "%d-%m-%Y")
# Plot PCA painting the date of extraction
b <- ggplot(df_mirna_pca2, aes(x=PC1, y=PC2))+
geom_point(aes(colour = date))+
scale_color_gradient(low="blue", high="red")+
ggtitle("PCA of miRNAs separated by date")
# Plot both PCA together
grid.arrange(a , b, ncol=2, nrow=1)
#| label: fig-pcaName
#| fig-cap: "PCA of the miRNA quantity separated by ID names."
#| warning: false
# We separate the sample name by groups
df_mirna_pca2 <- df_mirna_pca2 %>%
dplyr::mutate(NameNumber = substr(Sample.Name , start = nchar(Sample.Name) - 2 , stop = nchar(Sample.Name)))%>%
dplyr::mutate(NameGroup = gsub('.{3}$', '', Sample.Name))
# Reset the class of the new variables
df_mirna_pca2$NameNumber <- as.numeric(df_mirna_pca2$NameNumber)
df_mirna_pca2$NameGroup <- as.factor(df_mirna_pca2$NameGroup)
# Plot the PCA separated by Sampl.Name
ggplot(df_mirna_pca2, aes(x=PC1, y=PC2))+
geom_point(aes(colour = NameNumber , shape = NameGroup), size = 3)+
scale_color_gradient(low="blue", high="red")+
ggtitle("PCA of miRNAs separated by ID")
#| label: fig-pca3D
#| fig-cap: "PCA of the miRNA quantity separated by ID names."
#| warning: false
library(plotly)
plot_ly(x = df_mirna_pca2$PC1, y = df_mirna_pca2$PC2, z = df_mirna_pca2$PC3, type = "scatter3d", mode = "markers", color = df_mirna_pca2$Plate)%>%
layout(title="PCA separated by Plate",
scene = list(xaxis = list(title = 'PC1'),
yaxis = list(title = 'PC2'),
zaxis = list(title = 'PC3')))
#| label: tbl-mirnaOutliers
#| tbl-cap: "PCA of the miRNA quantity without outliers."
#| warning: false
# Filtering the outliers
df_mirna_pca_new <- df_mirna_pca2 %>%
dplyr::filter(PC1 > -3.75)%>%
dplyr::select(-PC1,-PC2, -PC3, -PC4)
# Containing the info of outliers
df_mirna_outliers <- df_mirna_pca2 %>%
dplyr::filter(PC1 < -3.75) %>%
dplyr::select(Sample.Name, date, Plate_mir100)
kable(df_mirna_outliers)
#| label: fig-newpcaPlate
#| fig-cap: "PCA of the miRNA quantity without outliers."
#| warning: false
# Length comparison of the dataframe with and without the outliers
c(length(df_mirna_pca2$Sample.Name), length(df_mirna_pca_new$Sample.Name))
# Perform the PCA with the numeric data from the miRNAs
pca_mirna2 <- stats::prcomp(df_mirna_pca_new %>% dplyr::select(tidyr::starts_with("Quantity")), scale = TRUE)
# add the PCA results to the previous dataset
df_mirna_pca_new <- cbind(df_mirna_pca_new, as.data.frame(pca_mirna2$x))
ggplot(df_mirna_pca_new, aes(x=PC1, y=PC2))+
geom_point(aes(colour = factor(Plate_mir100)))+
ggtitle("New PCA of miRNAs separated by Plate")+
labs(color = "Plate")
# First we extract the outliers from the reshaped table
# Create identificator of the poutliers
id_outlier <- paste0(df_mirna_outliers$Sample.Name,
df_mirna_outliers$date,
df_mirna_outliers$Plate_mir100)
# Match the date variable type between both datasets
df_mirna_rs2$date <- as.Date(df_mirna_rs2$date, "%d-%m-%Y")
# Create the unique ID to remove the outliers from the dataset
df_mirna_rs3 <- df_mirna_rs2 %>%
dplyr::mutate(id_outlier = paste0(Sample.Name, date, Plate))
# Filter out rows with IDs in outlier_ids
df_mirna_rs3 <- df_mirna_rs3[!df_mirna_rs3$id_outlier %in% id_outlier, ]
c(length(df_mirna_rs2$Sample.Name), length(df_mirna_rs3$Sample.Name))
#| label: fig-QuantDif
#| fig-cap: "Quantity difference between miRNA duplicate samples."
#| warning: false
# Create the dataframe with the neccessary names for the measure_precission function
tb_input <- data.frame(ID = paste0(df_mirna_rs3$Sample.Name, df_mirna_rs3$date),
sensor = df_mirna_rs3$miRNA,
measurement = df_mirna_rs3$Quantity)
#Measure the differences
tb_diff <- ImgOMIC::measure_precision(tb_input)
#| label: tbl-PrecNumbers
#| tbl-cap: "RMS and MAD precission values (%) separated by miRNA."
#| warning: false
# Show the table with the precision values
kable(tb_diff%>%dplyr::select(-data))
#| warning: false
#| results: 'hide'
# Create the histogram column and calculate the area to be able to plot the normal
# distribution of the precision values.
tb_diff <- tb_diff %>%
dplyr::mutate(histogram = purrr::map(data, function(x) hist(x$diff/x$mn, breaks = 15, plot = FALSE)))%>%
dplyr::mutate(hist_area = purrr::map(histogram, function(x) sum(x$counts*diff(x$breaks))))%>%
dplyr::mutate(diff_mean = purrr::map(data, function(x) mean(x$diff/x$mn)))
# Custom plotting function to suppress output
plot_precision <- function(i) {
plot(i$histogram, col = "lightblue", main = paste(as.character(i$sensor), "variation"), xlab = "Relative Error", xlim = c(-0.4, 0.4))
curve(i$hist_area * dnorm(x, mean = mean(i$data$diff / i$data$mn), sd = i$RMS / 100), col = "red", add = TRUE, lwd = 2)
curve(i$hist_area * dnorm(x, mean = mean(i$data$diff / i$data$mn), sd = i$MAD / 100), col = "green", add = TRUE, lwd = 2)
legend("topright", legend = c("RMS", "MAD"), col = c("red", "green"), lwd = 2)
}
# Apply the custom function
invisible(apply(tb_diff, 1, plot_precision))
#| label: tbl-finalMeasure
#| tbl-cap: "Final mir100 Normalized measure."
#| warning: false
# Write the equation of the normalized value that would be used to calculate
norm_mir100_eq <- expression(mir100 / ((mir16 + mir92)/2))
# Select the MAD error for the error propagation calculous
tb_diff$err <- tb_diff$MAD
# Use the error propagation formula to calculate the final measure and the error
mir100_norm <- ImgOMIC::error_propagation(tb_diff, norm_mir100_eq)
mir100_norm$id_date <- mir100_norm$ID
# Separate the ID and date information
mir100_norm  <- mir100_norm %>%
dplyr::mutate(
# Extract everything except the last 10 characters
ID_name = substr(ID, 1, nchar(ID) - 10),
# Extract the last 10 characters
ID_date = substr(ID, nchar(ID) - 9, nchar(ID))
)
#data.table::fwrite(mir100_norm, "Results/mir100_Noirmalized.csv")
kable(head(mir100_norm))
mir100_norm$error / mir100_norm$measure *100
#| label: tbl-input_table
#| tbl-cap: "First view of Input data table."
#| warning: false
#|
# Load the testing data
df_test <- read.table("README_data/Tutorial_table.csv", header = TRUE, sep = ",")
knitr::kable(head(df_test))
tb_output <- ImgOMIC::measure_precision(df_test)
library(dplyr)
colnames(tb_output)
knitr::kable(tb_output%>%dplyr::select(-data))
knitr::kable(head(tb_output$data[[1]]))
fun <- expression(s1/s2)
tb_input <- tb_output
tb_input$err <- tb_input$MAD
norm_val <- ImgOMIC::error_propagation(tb_input, fun)
head(norm_val)
rel_err <-norm_val$error /  norm_val$measure * 100
rel_err
#| label: tbl-input_table
#| tbl-cap: "First view of Input data table."
#| warning: false
#|
# Load the testing data
df_test <- read.table("README_data/Tutorial_table.csv", header = TRUE, sep = ",")
knitr::kable(head(df_test))
tb_output <- ImgOMIC::measure_precision(df_test)
library(dplyr)
colnames(tb_output)
knitr::kable(tb_output%>%dplyr::select(-data))
knitr::kable(head(tb_output$data[[1]]))
fun <- expression(s1/s2)
tb_input <- tb_output
tb_input$err <- tb_input$MAD
norm_val <- ImgOMIC::error_propagation(tb_input, fun)
head(norm_val)
rel_err <-norm_val$error /  norm_val$measure * 100
rel_err
View(tb_input)
View(tb_input[[2]][[1]])
View(tb_input[[2]][[2]])
fun <- expression(s1*s2)
tb_input <- tb_output
tb_input$err <- tb_input$MAD
norm_val <- ImgOMIC::error_propagation(tb_input, fun)
head(norm_val)
rel_err <-norm_val$error /  norm_val$measure * 100
rel_err
fun <- expression(s1*s2^2)
tb_input <- tb_output
tb_input$err <- tb_input$MAD
norm_val <- ImgOMIC::error_propagation(tb_input, fun)
head(norm_val)
rel_err <-norm_val$error /  norm_val$measure * 100
rel_err
fun <- expression(s1*s2)
rel_err <-norm_val$error /  norm_val$measure * 10000
rel_err
rel_err <-norm_val$error /  norm_val$measure * 100000
rel_err
rel_err <-norm_val$error /  norm_val$measure * 100
rel_err
#| label: tbl-input_table
#| tbl-cap: "First view of Input data table."
#| warning: false
#|
# Load the testing data
df_test <- read.table("README_data/Tutorial_table.csv", header = TRUE, sep = ",")
knitr::kable(head(df_test))
tb_output <- ImgOMIC::measure_precision(df_test)
library(dplyr)
colnames(tb_output)
knitr::kable(tb_output%>%dplyr::select(-data))
knitr::kable(head(tb_output$data[[1]]))
fun <- expression(s1*s2)
tb_input <- tb_output
tb_input$err <- tb_input$MAD
norm_val <- ImgOMIC::error_propagation(tb_input, fun)
head(norm_val)
rel_err <-norm_val$error /  norm_val$measure * 100
rel_err
tb <- tb_input
View(tb_input)
View(tb_input[[2]][[1]])
required_columns <- c("sensor", "err", "data")
# Check if required columns are present in the dataframe
missing_columns <- setdiff(required_columns, colnames(tb))
# If there are missing columns, show a message
if (length(missing_columns) > 0) {
missing_msg <- paste("The following required columns are missing:", paste(missing_columns, collapse = ", "))
stop(missing_msg) # Stop execution with an error message
}
required_columns <- c("ID", "mn", "n")
# Check if required columns are present in the dataframe
missing_columns <- setdiff(required_columns, colnames(tb$data[[1]]))
# If there are missing columns in the data dataframe, show a message
if (length(missing_columns) > 0) {
missing_msg <- paste("The following required columns are missing:", paste(missing_columns, collapse = ", "))
stop(missing_msg) # Stop execution with an error message
}
# Install the required packages
list.of.packages <- c("dplyr", "purrr", "tidyr", "tibble")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(dplyr)
# save the variable names from the function
vars <- all.vars(fun)
# Sort the var names ascending alphabetically
vars <- sort(vars, decreasing = FALSE)
# Check if there is some variable in the function that is not defined in the tb
missing_vars <- setdiff(vars, tb$sensor)
if (length(missing_vars) > 0) {
missing_msg <- paste("The following variables defined in the equation are not shown in the input tibble:", paste(missing_columns, collapse = ", "))
stop(missing_msg) # Stop execution with an error message
}
# Simplify the tibble to save the mn value of each sensor divided in columns and ordered in rows by ID.
df_measure <- tb %>%
dplyr::select(sensor, data)%>%
dplyr::mutate(data = purrr::map(data, ~ .x %>% dplyr::select(ID, mn))) %>%
tidyr::unnest(data) %>%
tidyr::pivot_wider(names_from = sensor, values_from = mn)%>%
dplyr::arrange(ID)
View(df_measure)
# Delete the rows where there was an NA value and inform about it
df_measure2 <- df_measure %>%
dplyr::filter(if_all(everything(), ~ !is.na(.)))
df_dif <- length(df_measure$ID) - length(df_measure2$ID)
if (df_dif > 0) {
message(df_dif, "samples have been excluded from the calulation due to missing values in sensor data.")
}
# Add the variable nsensor to later save the information of the counts used for
# the calculation of the mean value (This will be important in order to
# calculate the real variability of that measurement)
tb$nsensor <- paste0("n_", tb$sensor)
# Save the n_sensor value in the same way as the mn was saved before
df_n <- tb%>%
dplyr::select(nsensor, data)%>%
dplyr::mutate(data = purrr::map(data, ~ .x %>% dplyr::select(ID, n))) %>%
tidyr::unnest(data) %>%
tidyr::pivot_wider(names_from = nsensor, values_from = n)%>%
dplyr::arrange(ID)%>%
dplyr::filter(if_all(everything(), ~ !is.na(.)))%>%
dplyr::select(-ID)
# Merge both dataframes
df_measure <- cbind(df_measure, df_n)
# Define the partial derivative of fun respect each sensor
derivatives <- lapply(vars, function(var) D(fun, var))
View(derivatives)
# Ensure that the position of the sensors in the tibble is the same as in the "vars"
tb <- tb %>%
dplyr::arrange(sensor)
# Get the relative error values for each var
err <- as.numeric(tb$err[tb$sensor %in% vars])/(100)
# create the Expression for error propagation
error_prop <- 0
for (i in seq_along(derivatives)) {
# Create the expression part by part
term <- substitute(der^2 * (error/sqrt(n_val)*val)^2, list(der = derivatives[[i]], error = err[i], val = str2lang(vars[i]), n_val = str2lang(paste0("n_",vars[i]))))
error_prop <- substitute(a + b, list(a = error_prop, b = term))
}
error_prop <- substitute(sqrt(x), list(x = error_prop))
error_prop
apply_equation <- function(...) {
# It is neccessary to have a df with the function variable names as columns
# Capture the inputs in a list
inputs <- list(...)
# Evaluate the expression, mapping inputs to x1, x2, ...
res <- eval(fun[[1]], envir = inputs)
err <- eval(do.call(substitute, list(error_prop, inputs)))
return(c(res, err))
}
# Aplly the function in the dataframe
results <- do.call(mapply, c(FUN = apply_equation, as.list(df_measure)))
View(norm_val)
sqrt(0 + 1054.5^2 * (0.0940808456833832/sqrt(2) * 4.1)^2 + 4.1^2 * (0.183711968954071/sqrt(2) * 1054.5)^2)
View(results)
630.9963/4323.45
fun <- expression(s1/s2)
tb_input <- tb_output
tb_input$err <- tb_input$MAD
norm_val <- ImgOMIC::error_propagation(tb_input, fun)
head(norm_val)
rel_err <-norm_val$error /  norm_val$measure * 100
rel_err
rel_err <-norm_val$error /  norm_val$measure * 100
rel_err
fun <- expression(s1/s2)
required_columns <- c("sensor", "err", "data")
# Check if required columns are present in the dataframe
missing_columns <- setdiff(required_columns, colnames(tb))
# If there are missing columns, show a message
if (length(missing_columns) > 0) {
missing_msg <- paste("The following required columns are missing:", paste(missing_columns, collapse = ", "))
stop(missing_msg) # Stop execution with an error message
}
required_columns <- c("ID", "mn", "n")
# Check if required columns are present in the dataframe
missing_columns <- setdiff(required_columns, colnames(tb$data[[1]]))
# If there are missing columns in the data dataframe, show a message
if (length(missing_columns) > 0) {
missing_msg <- paste("The following required columns are missing:", paste(missing_columns, collapse = ", "))
stop(missing_msg) # Stop execution with an error message
}
# Install the required packages
list.of.packages <- c("dplyr", "purrr", "tidyr", "tibble")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(dplyr)
# save the variable names from the function
vars <- all.vars(fun)
# Sort the var names ascending alphabetically
vars <- sort(vars, decreasing = FALSE)
# Check if there is some variable in the function that is not defined in the tb
missing_vars <- setdiff(vars, tb$sensor)
if (length(missing_vars) > 0) {
missing_msg <- paste("The following variables defined in the equation are not shown in the input tibble:", paste(missing_columns, collapse = ", "))
stop(missing_msg) # Stop execution with an error message
}
# Simplify the tibble to save the mn value of each sensor divided in columns and ordered in rows by ID.
df_measure <- tb %>%
dplyr::select(sensor, data)%>%
dplyr::mutate(data = purrr::map(data, ~ .x %>% dplyr::select(ID, mn))) %>%
tidyr::unnest(data) %>%
tidyr::pivot_wider(names_from = sensor, values_from = mn)%>%
dplyr::arrange(ID)
# Delete the rows where there was an NA value and inform about it
df_measure2 <- df_measure %>%
dplyr::filter(if_all(everything(), ~ !is.na(.)))
df_dif <- length(df_measure$ID) - length(df_measure2$ID)
if (df_dif > 0) {
message(df_dif, "samples have been excluded from the calulation due to missing values in sensor data.")
df_measure <- df_measure2
}
# Add the variable nsensor to later save the information of the counts used for
# the calculation of the mean value (This will be important in order to
# calculate the real variability of that measurement)
tb$nsensor <- paste0("n_", tb$sensor)
# Save the n_sensor value in the same way as the mn was saved before
df_n <- tb%>%
dplyr::select(nsensor, data)%>%
dplyr::mutate(data = purrr::map(data, ~ .x %>% dplyr::select(ID, n))) %>%
tidyr::unnest(data) %>%
tidyr::pivot_wider(names_from = nsensor, values_from = n)%>%
dplyr::arrange(ID)%>%
dplyr::filter(if_all(everything(), ~ !is.na(.)))%>%
dplyr::select(-ID)
# Merge both dataframes
df_measure <- cbind(df_measure, df_n)
# Define the partial derivative of fun respect each sensor
derivatives <- lapply(vars, function(var) D(fun, var))
# Ensure that the position of the sensors in the tibble is the same as in the "vars"
tb <- tb %>%
dplyr::arrange(sensor)
# Get the relative error values for each var
err <- as.numeric(tb$err[tb$sensor %in% vars])/(100)
# create the Expression for error propagation
error_prop <- 0
for (i in seq_along(derivatives)) {
# Create the expression part by part
term <- substitute(der^2 * (error/sqrt(n_val)*val)^2, list(der = derivatives[[i]], error = err[i], val = str2lang(vars[i]), n_val = str2lang(paste0("n_",vars[i]))))
error_prop <- substitute(a + b, list(a = error_prop, b = term))
}
error_prop <- substitute(sqrt(x), list(x = error_prop))
error_prop
View(tb_input)
